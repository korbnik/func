//==================================================================================
// Author      :
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================MAJOR=================================================
//=  0 C     101011010101   C-dur    0 #     0  |
//   1 C#    110101101010   Cis-dur  7 #     7  | Des-dur  5 b
//=  2 D     011010110101   D-dur    2 #     2  |
//   3 D#    101101011010   Dis-dur  3 #     3  | Ees-dur  3 b
//=  4 E     010110101101   E-dur    4 #     4  |
//=  5 F     101011010110   F-dur    1 b     1  |
//   6 F#    010101101011   Fis-dur  6 #     6  | Ges-dur  6 b
//=  7 G     101010110101   G-dur    1 #     1  |
//   8 G#    110101011010   Gis-dur  6 # 1 x 8  | Aes-dur  4 b
//=  9 A     011010101101   A-dur    3 #     3  |
//  10 A#    101101010110   Ais-dur  4 # 3 x 10 | Bes-dur  2 b
//= 11 B     010110101011   H-dur    5 #     5  |
//= 12 Db    110101101010   Des-dur  5 b
//= 13 Eb    101101011010   Ees-dur  3 b
//= 14 Gb    010101101011   Ges-dur  6 b
//= 15 Ab    110101011010   Aes-dur  4 b
//= 16 Bb    101101010110   Bes-dur  2 b
//============================MINOR=================================================
//= 17 C     101101011010   C-moll   3 b     3  |
//= 18 C#    010110101101   Cis-moll 4 #     4  | Des-moll 6 b 1 p 8
//= 19 D     101011010110   D-moll   1 b     1  |
//= 20 D#    010101101011   Dis-moll 6 #     6  | Ees-moll 6 b
//= 21 E     101010110101   E-moll   1 #     1  |
//= 22 F     110101011010   F-moll   4 b     4  |
//= 23 F#    011010101101   Fis-moll 3 #     3  | Ges-moll 5 b 2 p 9
//= 24 G     101101010110   G-moll   2 b     2  |
//= 25 G#    010110101011   Gis-moll 5 #     5  | Aes-moll 7 b
//= 26 A     101011010101   A-moll   0 #     0  |
//= 27 A#    110101101010   Bes-moll 5 b     5  | Ais-moll 7 #
//= 28 B     011010110101   H-moll   2 #     2  |
//  29 Db    010110101101   Des-moll 6 b 1 p 8
//  30 Eb    010101101011   Ees-moll 6 b
//  31 Gb    011010101101   Ges-moll 5 b 2 p 9
//  32 Ab    010110101011   Aes-moll 7 b
//  33 A#    110101101010   Ais-moll 7 #
//============================OKTAVA================================================
// O_SK   O_KR   O_BI   O_SM   O_01   O_02   O_03   O_04   O_05
//   0      1      2      3      4      5      6      7      8
//==================================================================================

#include <iostream>
#include <iomanip>
#include <fstream>
#include <cstdlib>
#include <cstdio>
#include <ctime>
#include <cmath>

using namespace std;
#define EC   4096
#define NC   1024
#define NT   34    // count tonality
#define RC   62    // count rhythm patterns
#define MTC  32    // count tact max
#define KC   8     // count kolbosa
#define TC   4     // count rhythm patterns
#define FC   11    // count music forms
#define LD   1024
#define DD   512   // DD
#define OKT  4     // begining oktava melody
#define GRM  4     // begining oktava garmony
#define BAS  2     // begining oktava bass
#define SD1  4
#define SD2  3
#define PS   2     // mathematical probability of the boundary conditions fundiat_uu
#define TA5  5
#define VOL  80
#define GA   23
#define GGA  38
#define REP  false

////NATURE///MAJOR////  C  D  E  F  G  A  B  Db Eb Gb Ab Bb | C# D# F# G# A#
//////////////////////  0  2  4  5  7  9  11 12 13 14 15 16 |  1  3  6  8 10
////NATURE///MINOR////  C  D  E  F  G  A  B  C# D# F# G# Bb | Db Eb Gb Ab A#
//////////////////////  17 19 21 22 24 26 28 18 20 23 25 27 | 29 30 31 32 33
//==============================================================================================================================================================================================================================================================
struct strunote {int nn; int stp; char c1n; char a1n; char c2n; char a2n; bool ust; };
struct strunote note[108]={{  0,0,'C',' ','C',' ',false},{  1,0,'C','#','D','b',false},{  2,0,'D',' ','D',' ',false},{  3,0,'D','#','E','b',false},{  4,0,'E',' ','E',' ',false},{  5,0,'F',' ','F',' ',false},{  6,0,'F','#','G','b',false},{  7,0,'G',' ','G',' ',false},{  8,0,'G','#','A','b',false},{  9,0,'A',' ','A',' ',false},{ 10,0,'A','#','B','b',false},{ 11,0,'B',' ','B',' ',false},
						   { 12,0,'C',' ','C',' ',false},{ 13,0,'C','#','D','b',false},{ 14,0,'D',' ','D',' ',false},{ 15,0,'D','#','E','b',false},{ 16,0,'E',' ','E',' ',false},{ 17,0,'F',' ','F',' ',false},{ 18,0,'F','#','G','b',false},{ 19,0,'G',' ','G',' ',false},{ 20,0,'G','#','A','b',false},{ 21,0,'A',' ','A',' ',false},{ 22,0,'A','#','B','b',false},{ 23,0,'B',' ','B',' ',false},
						   { 24,0,'C',' ','C',' ',false},{ 25,0,'C','#','D','b',false},{ 26,0,'D',' ','D',' ',false},{ 27,0,'D','#','E','b',false},{ 28,0,'E',' ','E',' ',false},{ 29,0,'F',' ','F',' ',false},{ 30,0,'F','#','G','b',false},{ 31,0,'G',' ','G',' ',false},{ 32,0,'G','#','A','b',false},{ 33,0,'A',' ','A',' ',false},{ 34,0,'A','#','B','b',false},{ 35,0,'B',' ','B',' ',false},
						   { 36,0,'C',' ','C',' ',false},{ 37,0,'C','#','D','b',false},{ 38,0,'D',' ','D',' ',false},{ 39,0,'D','#','E','b',false},{ 40,0,'E',' ','E',' ',false},{ 41,0,'F',' ','F',' ',false},{ 42,0,'F','#','G','b',false},{ 43,0,'G',' ','G',' ',false},{ 44,0,'G','#','A','b',false},{ 45,0,'A',' ','A',' ',false},{ 46,0,'A','#','B','b',false},{ 47,0,'B',' ','B',' ',false},
						   { 48,0,'C',' ','C',' ',false},{ 49,0,'C','#','D','b',false},{ 50,0,'D',' ','D',' ',false},{ 51,0,'D','#','E','b',false},{ 52,0,'E',' ','E',' ',false},{ 53,0,'F',' ','F',' ',false},{ 54,0,'F','#','G','b',false},{ 55,0,'G',' ','G',' ',false},{ 56,0,'G','#','A','b',false},{ 57,0,'A',' ','A',' ',false},{ 58,0,'A','#','B','b',false},{ 59,0,'B',' ','B',' ',false},
						   { 60,0,'C',' ','C',' ',false},{ 61,0,'C','#','D','b',false},{ 62,0,'D',' ','D',' ',false},{ 63,0,'D','#','E','b',false},{ 64,0,'E',' ','E',' ',false},{ 65,0,'F',' ','F',' ',false},{ 66,0,'F','#','G','b',false},{ 67,0,'G',' ','G',' ',false},{ 68,0,'G','#','A','b',false},{ 69,0,'A',' ','A',' ',false},{ 70,0,'A','#','B','b',false},{ 71,0,'B',' ','B',' ',false},
						   { 72,0,'C',' ','C',' ',false},{ 73,0,'C','#','D','b',false},{ 74,0,'D',' ','D',' ',false},{ 75,0,'D','#','E','b',false},{ 76,0,'E',' ','E',' ',false},{ 77,0,'F',' ','F',' ',false},{ 78,0,'F','#','G','b',false},{ 79,0,'G',' ','G',' ',false},{ 80,0,'G','#','A','b',false},{ 81,0,'A',' ','A',' ',false},{ 82,0,'A','#','B','b',false},{ 83,0,'B',' ','B',' ',false},
						   { 84,0,'C',' ','C',' ',false},{ 85,0,'C','#','D','b',false},{ 86,0,'D',' ','D',' ',false},{ 87,0,'D','#','E','b',false},{ 88,0,'E',' ','E',' ',false},{ 89,0,'F',' ','F',' ',false},{ 90,0,'F','#','G','b',false},{ 91,0,'G',' ','G',' ',false},{ 92,0,'G','#','A','b',false},{ 93,0,'A',' ','A',' ',false},{ 94,0,'A','#','B','b',false},{ 95,0,'B',' ','B',' ',false},
						   { 96,0,'C',' ','C',' ',false},{ 97,0,'C','#','D','b',false},{ 98,0,'D',' ','D',' ',false},{ 99,0,'D','#','E','b',false},{100,0,'E',' ','E',' ',false},{101,0,'F',' ','F',' ',false},{102,0,'F','#','G','b',false},{103,0,'G',' ','G',' ',false},{104,0,'G','#','A','b',false},{105,0,'A',' ','A',' ',false},{106,0,'A','#','B','b',false},{107,0,'B',' ','B',' ',false}};
struct strunote notet[63];
//==============================================================================================================================================================================================================================================================
struct strudomino  { int ntime; int fish[2][16][4][5]; };
struct strudomino domino[8] = {{ 16,{{{{1,1,1,1,1},{1,1,0,2,2},{1,1,1,2,2},{1,1,0,3,3}},{{1,1,1,1,1},{1,1,0,2,2},{1,1,1,3,3},{3,1,0,0,0}},{{1,1,1,1,0},{1,1,0,3,0},{3,1,1,0,0},{1,1,0,0,0}},{{1,1,1,1,0},{1,1,0,3,0},{3,1,1,0,0},{3,1,0,0,0}},{{1,1,1,0,0},{3,1,0,0,0},{1,1,1,1,0},{1,1,0,3,0}},{{1,1,1,0,0},{3,1,0,0,0},{1,1,1,0,0},{3,1,0,0,0}},{{1,1,1,0,0},{3,1,0,0,0},{3,1,1,0,0},{1,1,0,0,0}},{{1,1,1,0,0},{3,1,0,0,0},{3,1,1,0,0},{3,1,0,0,0}},{{3,1,1,0,0},{1,1,0,1,1},{1,1,1,2,2},{1,1,0,3,3}},{{3,1,1,0,0},{1,1,0,1,0},{1,1,1,3,0},{3,1,0,0,0}},{{3,1,1,0,0},{1,1,0,0,0},{3,1,1,0,0},{1,1,0,0,0}},{{3,1,1,0,0},{1,1,0,0,0},{3,1,1,0,0},{3,1,0,0,0}},{{3,1,1,0,0},{3,1,0,0,0},{1,1,1,1,0},{1,1,0,3,0}},{{3,1,1,0,0},{3,1,0,0,0},{1,1,1,0,0},{3,1,0,0,0}},{{3,1,1,0,0},{3,1,0,0,0},{3,1,1,0,0},{1,1,0,0,0}},{{3,1,1,0,0},{3,1,0,0,0},{3,1,1,0,0},{3,1,0,0,0}}},
                                     {{{2,1,1,1,1},{1,1,0,2,2},{1,1,1,2,2},{1,1,0,3,3}},{{2,1,1,1,1},{1,1,0,2,2},{1,1,1,3,3},{3,1,0,0,0}},{{2,1,1,1,0},{1,1,0,3,0},{3,1,1,0,0},{1,1,0,0,0}},{{2,1,1,1,0},{1,1,0,3,0},{3,1,1,0,0},{3,1,0,0,0}},{{2,1,1,0,0},{3,1,0,0,0},{1,1,1,1,0},{1,1,0,3,0}},{{2,1,1,0,0},{3,1,0,0,0},{1,1,1,0,0},{3,1,0,0,0}},{{2,1,1,0,0},{3,1,0,0,0},{3,1,1,0,0},{1,1,0,0,0}},{{2,1,1,0,0},{3,1,0,0,0},{3,1,1,0,0},{3,1,0,0,0}},{{3,1,1,0,0},{1,1,0,1,1},{1,1,1,2,2},{1,1,0,3,3}},{{3,1,1,0,0},{1,1,0,1,0},{1,1,1,3,0},{3,1,0,0,0}},{{3,1,1,0,0},{1,1,0,0,0},{3,1,1,0,0},{1,1,0,0,0}},{{3,1,1,0,0},{1,1,0,0,0},{3,1,1,0,0},{3,1,0,0,0}},{{3,1,1,0,0},{3,1,0,0,0},{1,1,1,1,0},{1,1,0,3,0}},{{3,1,1,0,0},{3,1,0,0,0},{1,1,1,0,0},{3,1,0,0,0}},{{3,1,1,0,0},{3,1,0,0,0},{3,1,1,0,0},{1,1,0,0,0}},{{3,1,1,0,0},{3,1,0,0,0},{3,1,1,0,0},{3,1,0,0,0}}}}},
                               {  4,{{{{1,2,1,1,0},{2,0,0,0,0},{1,2,1,3,0},{2,0,0,0,0}},{{1,2,1,0,0},{2,0,0,0,0},{3,2,1,0,0},{3,0,0,0,0}},{{3,2,1,0,0},{3,0,0,0,0},{1,2,1,0,0},{2,0,0,0,0}},{{3,2,1,0,0},{3,0,0,0,0},{3,2,1,0,0},{3,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}},
                                     {{{2,2,1,1,0},{2,0,0,0,0},{1,2,1,3,0},{2,0,0,0,0}},{{2,2,1,0,0},{2,0,0,0,0},{3,2,1,0,0},{3,0,0,0,0}},{{3,2,1,0,0},{3,0,0,0,0},{1,2,1,0,0},{2,0,0,0,0}},{{3,2,1,0,0},{3,0,0,0,0},{3,2,1,0,0},{3,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}}}},
                               {  8,{{{{1,2,1,1,0},{2,0,0,0,0},{1,1,1,2,1},{1,1,0,3,3}},{{1,2,1,1,0},{2,0,0,0,0},{1,1,1,3,0},{3,1,0,0,0}},{{1,2,1,0,0},{2,0,0,0,0},{3,1,1,0,0},{1,1,0,0,0}},{{1,2,1,0,0},{2,0,0,0,0},{3,1,1,0,0},{3,1,0,0,0}},{{3,2,1,0,0},{3,0,0,0,0},{1,1,1,1,0},{1,1,0,3,0}},{{3,2,1,0,0},{3,0,0,0,0},{1,1,1,0,0},{3,1,0,0,0}},{{3,2,1,0,0},{3,0,0,0,0},{3,1,1,0,0},{1,1,0,0,0}},{{3,2,1,0,0},{3,0,0,0,0},{3,1,1,0,0},{3,1,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}},
                                     {{{2,2,1,1,0},{2,0,0,0,0},{1,1,1,2,1},{1,1,0,3,3}},{{2,2,1,1,0},{2,0,0,0,0},{1,1,1,3,0},{3,1,0,0,0}},{{2,2,1,0,0},{2,0,0,0,0},{3,1,1,0,0},{1,1,0,0,0}},{{2,2,1,0,0},{2,0,0,0,0},{3,1,1,0,0},{3,1,0,0,0}},{{3,2,1,0,0},{3,0,0,0,0},{1,1,1,1,0},{1,1,0,3,0}},{{3,2,1,0,0},{3,0,0,0,0},{1,1,1,0,0},{3,1,0,0,0}},{{3,2,1,0,0},{3,0,0,0,0},{3,1,1,0,0},{1,1,0,0,0}},{{3,2,1,0,0},{3,0,0,0,0},{3,1,1,0,0},{3,1,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}}}},
                               {  8,{{{{1,1,1,1,1},{1,2,0,2,3},{2,0,1,0,0},{1,1,0,3,0}},{{1,1,1,1,0},{1,2,0,3,0},{2,0,1,0,0},{3,1,0,0,0}},{{1,1,1,0,0},{3,2,0,0,0},{3,0,1,0,0},{1,1,0,0,0}},{{1,1,1,0,0},{3,2,0,0,0},{3,0,1,0,0},{3,1,0,0,0}},{{3,1,1,0,0},{1,2,0,1,0},{2,0,1,0,0},{1,1,0,3,0}},{{3,1,1,0,0},{1,2,0,0,0},{2,0,1,0,0},{3,1,0,0,0}},{{3,1,1,0,0},{3,2,0,0,0},{3,0,1,0,0},{1,1,0,0,0}},{{3,1,1,0,0},{3,2,0,0,0},{3,0,1,0,0},{3,1,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}},
                                     {{{2,1,1,1,1},{1,2,0,2,3},{2,0,1,0,0},{1,1,0,3,0}},{{2,1,1,1,0},{1,2,0,3,0},{2,0,1,0,0},{3,1,0,0,0}},{{2,1,1,0,0},{3,2,0,0,0},{3,0,1,0,0},{1,1,0,0,0}},{{2,1,1,0,0},{3,2,0,0,0},{3,0,1,0,0},{3,1,0,0,0}},{{3,1,1,0,0},{1,2,0,1,0},{2,0,1,0,0},{1,1,0,3,0}},{{3,1,1,0,0},{1,2,0,0,0},{2,0,1,0,0},{3,1,0,0,0}},{{3,1,1,0,0},{3,2,0,0,0},{3,0,1,0,0},{1,1,0,0,0}},{{3,1,1,0,0},{3,2,0,0,0},{3,0,1,0,0},{3,1,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}}}},
                               {  8,{{{{1,1,1,1,1},{1,1,0,2,3},{1,2,1,3,0},{2,0,0,0,0}},{{1,1,1,1,0},{1,1,0,3,0},{3,2,1,0,0},{3,0,0,0,0}},{{1,1,1,0,0},{3,1,0,0,0},{1,2,1,0,0},{2,0,0,0,0}},{{1,1,1,0,0},{3,1,0,0,0},{3,2,1,0,0},{3,0,0,0,0}},{{3,1,1,0,0},{1,1,0,1,0},{1,2,1,3,0},{2,0,0,0,0}},{{3,1,1,0,0},{1,1,0,0,0},{3,2,1,0,0},{3,0,0,0,0}},{{3,1,1,0,0},{3,1,0,0,0},{1,2,1,0,0},{2,0,0,0,0}},{{3,1,1,0,0},{3,1,0,0,0},{3,2,1,0,0},{3,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}},
                                     {{{2,1,1,1,1},{1,1,0,2,3},{1,2,1,3,0},{2,0,0,0,0}},{{2,1,1,1,0},{1,1,0,3,0},{3,2,1,0,0},{3,0,0,0,0}},{{2,1,1,0,0},{3,1,0,0,0},{1,2,1,0,0},{2,0,0,0,0}},{{2,1,1,0,0},{3,1,0,0,0},{3,2,1,0,0},{3,0,0,0,0}},{{3,1,1,0,0},{1,1,0,1,0},{1,2,1,3,0},{2,0,0,0,0}},{{3,1,1,0,0},{1,1,0,0,0},{3,2,1,0,0},{3,0,0,0,0}},{{3,1,1,0,0},{3,1,0,0,0},{1,2,1,0,0},{2,0,0,0,0}},{{3,1,1,0,0},{3,1,0,0,0},{3,2,1,0,0},{3,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}}}},
                               {  4,{{{{1,3,1,1,0},{2,0,0,0,0},{2,0,1,0,0},{1,1,0,3,0}},{{1,3,1,0,0},{2,0,0,0,0},{2,0,1,0,0},{3,1,0,0,0}},{{3,3,1,0,0},{3,0,0,0,0},{3,0,1,0,0},{1,1,0,0,0}},{{3,3,1,0,0},{3,0,0,0,0},{3,0,1,0,0},{3,1,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}},
                                     {{{2,3,1,1,0},{2,0,0,0,0},{2,0,1,0,0},{1,1,0,3,0}},{{2,3,1,0,0},{2,0,0,0,0},{2,0,1,0,0},{3,1,0,0,0}},{{3,3,1,0,0},{3,0,0,0,0},{3,0,1,0,0},{1,1,0,0,0}},{{3,3,1,0,0},{3,0,0,0,0},{3,0,1,0,0},{3,1,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}}}},
                               {  4,{{{{1,1,1,1,0},{1,3,0,3,0},{2,0,1,0,0},{2,0,0,0,0}},{{1,1,1,0,0},{3,3,0,0,0},{3,0,1,0,0},{3,0,0,0,0}},{{3,1,1,0,0},{1,3,0,0,0},{2,0,1,0,0},{2,0,0,0,0}},{{3,1,1,0,0},{3,3,0,0,0},{3,0,1,0,0},{3,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}},
                                     {{{2,1,1,1,0},{1,3,0,3,0},{2,0,1,0,0},{2,0,0,0,0}},{{2,1,1,0,0},{3,3,0,0,0},{3,0,1,0,0},{3,0,0,0,0}},{{3,1,1,0,0},{1,3,0,0,0},{2,0,1,0,0},{2,0,0,0,0}},{{3,1,1,0,0},{3,3,0,0,0},{3,0,1,0,0},{3,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}}}},
                               {  2,{{{{1,4,1,0,0},{2,0,0,0,0},{2,0,1,0,0},{2,0,0,0,0}},{{3,4,1,0,0},{3,0,0,0,0},{3,0,1,0,0},{3,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}},
                                     {{{2,4,1,0,0},{2,0,0,0,0},{2,0,1,0,0},{2,0,0,0,0}},{{3,4,1,0,0},{3,0,0,0,0},{3,0,1,0,0},{3,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}}}}};
struct strumatris { int ntime; int fish[16]; string istok; string stil; } ritmris1, ritmris2, ritmris3, ritmris4;
struct strumatris matris[RC] = {{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Basic Rhythm accompaniment - Disco"   },   //  0
								{ 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Rhythm accompaniment"                 },   //  1
								{ 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","6-six"                                },   //  2
								{ 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","6-six"                                },   //  3
								{ 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","6-six"                                },   //  4
								{ 1, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Boogie Shuffle"                       },   //  5
								{ 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Myself   Style","Bass"                                 },   //  6
								{ 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Myself   Style","Harmony Bass"                         },   //  7
								{ 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","Demo"                                 },   //  8
								{ 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Accompaniment rhythms 4/4, 3/4, 2/4"  },   //  9
								{ 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Rhythm accompaniment"                 },   // 10
								{ 2, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Polka Rhythm accompaniment"           },   // 11
								{ 2, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Accompaniment rhythms 4/4, 3/4, 2/4"  },   // 12
								{ 2, 1,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","5-five"                               },   // 13
								{ 2, 1,13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Hard Rock"                            },   // 14
								{ 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Accompaniment rhythms 4/4, 3/4, 2/4"  },   // 15
								{ 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Rhythm accompaniment"                 },   // 16
								{ 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","6-six"                                },   // 17
								{ 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Accompaniment rhythms 4/4, 3/4, 2/4"  },   // 18
								{ 2, 2, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Accompaniment rhythms 4/4, 3/4, 2/4"  },   // 19
								{ 2, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Accompaniment rhythms 4/4, 3/4, 2/4"  },   // 20
								{ 2, 2,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","Basic Rhythm - Yard chords"           },   // 21
								{ 2, 2,12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Fast Country Shuffle"                 },   // 22
								{ 2, 2,17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Accompaniment rhythms 4/4, 3/4, 2/4"  },   // 23
								{ 2, 3,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","Yard chords"                          },   // 24
								{ 2, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","6-six"                                },   // 25
								{ 2, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","6-six"                                },   // 26
								{ 2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","6-six"                                },   // 27
								{ 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","6-six"                                },   // 28
								{ 3, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Waltz 3/4"                            },   // 29
								{ 3, 2, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Rock 6/8, 12/8"                       },   // 30
								{ 3, 5,11,16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","Polimetr"                             },   // 31
								{ 3, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Home          ","7 | 1 | 0"                            },   // 32
								{ 4, 0, 2,13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Funk Disco"                           },   // 33
								{ 4, 1, 0,14,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","rhythm  8"                            },   // 34
								{ 4, 1, 1, 2,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Rock Shuffle"                         },   // 35
								{ 4, 1, 2, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Rock Ballad"                          },   // 36
								{ 4, 1, 4, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","Training"                             },   // 37
								{ 4, 2, 0, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Basic rhythm of rock and country-rock"},   // 38
								{ 4, 2, 0,10,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","rhythm  6"                            },   // 39
								{ 4, 2, 0,14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","rhythm  7"                            },   // 40
								{ 4, 2, 2,13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Fast Rock"                            },   // 41
								{ 4, 2,10, 0,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","rhythm  9"                            },   // 42
								{ 4, 2,10, 4, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Bo Diddley Style"                     },   // 43
								{ 4, 2,10,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","rhythm  4"                            },   // 44
								{ 4, 2,10,10,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","rhythm  5"                            },   // 45
								{ 4, 5,11,16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","rhythm 14"                            },   // 46
								{ 4, 7, 5, 2,10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","rhythm 10"                            },   // 47
								{ 4, 7, 5, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Funk Rock"                            },   // 48
								{ 4, 7, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "ABC  guitarist","Fast Country Shuffle"                 },   // 49
								{ 4, 7, 5,14, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","Rock - Pink Floyd"                    },   // 50
								{ 5, 1, 2, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "My       Group","My rithm"                             },   // 51
								{ 6, 0, 1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","Demo"                                 },   // 52
								{ 7, 6, 3, 1, 0, 2, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, "My       Group","My rithm"                             },   // 53
								{ 8, 0, 0, 1,17, 2, 3, 7,17, 0, 0, 0, 0, 0, 0, 0, 0, "Kofanov       ","Book 7-1"                             },   // 54
								{ 8, 2, 1, 2, 1, 2, 1, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, "Vahromeev Book","Barabannaia drob"                     },   // 55
								{ 8, 2, 2, 1,12, 3, 5, 7,17, 0, 0, 0, 0, 0, 0, 0, 0, "Kofanov       ","Book 7-3"                             },   // 56
								{ 8, 5, 0, 2, 1, 5, 0, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, "Rock   Academy","Training"                             },   // 57
								{ 8, 7, 5, 7, 5, 7,17, 7,17, 0, 0, 0, 0, 0, 0, 0, 0, "Vahromeev Book","Marsh"                                },   // 58
								{ 8, 7, 7, 7, 7, 7, 7, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, "Guitar College","Country style"                        },   // 59 RC-3
								{14, 1, 0, 1, 0, 4, 7, 7, 1, 0, 0, 4, 4, 7, 7, 0, 0, "Rock   Academy","Lavrov"                               },   // 60
								{16, 7, 5, 7, 5, 7,11, 7, 1, 7, 7, 7, 7, 7,17,17, 5, "Kofanov        ","Book 7-2"                            }};  // 61
//==============================================================================================================================================================================================================================================================
struct strutonal { int stp; char c1n; char a1n; bool ust; };
struct strutonal tonal[NT][12] = {{{1,'C',' ',true },{0,' ',' ',false},{2,'D',' ',false},{0,' ',' ',false},{3,'E',' ',true },{4,'F',' ',false},{0,' ',' ',false},{5,'G',' ',true },{0,' ',' ',false},{6,'A',' ',false},{0,' ',' ',false},{7,'B',' ',false}},     //  0   C_dur
								  {{7,'B','#',false},{1,'C','#',true },{0,' ',' ',false},{2,'D','#',false},{0,' ',' ',false},{3,'E','#',true },{4,'F','#',false},{0,' ',' ',false},{5,'G','#',true },{0,' ',' ',false},{6,'A','#',false},{0,' ',' ',false}},     //  1   Cis_dur
								  {{0,' ',' ',false},{7,'C','#',false},{1,'D',' ',true },{0,' ',' ',false},{2,'E',' ',false},{0,' ',' ',false},{3,'F','#',true },{4,'G',' ',false},{0,' ',' ',false},{5,'A',' ',true },{0,' ',' ',false},{6,'B',' ',false}},     //  2   D_dur
								  {{6,'C',' ',false},{0,' ',' ',false},{7,'D',' ',false},{1,'D','#',true },{0,' ',' ',false},{2,'F',' ',false},{0,' ',' ',false},{3,'G',' ',true },{4,'G','#',false},{0,' ',' ',false},{5,'A','#',true },{0,' ',' ',false}},     //  3   Dis_dur
								  {{0,' ',' ',false},{6,'C','#',false},{0,' ',' ',false},{7,'D','#',false},{1,'E',' ',true },{0,' ',' ',false},{2,'F','#',false},{0,' ',' ',false},{3,'G','#',true },{4,'A',' ',false},{0,' ',' ',false},{5,'B',' ',true }},     //  4   E_dur
								  {{5,'C',' ',true },{0,' ',' ',false},{6,'D',' ',false},{0,' ',' ',false},{7,'E',' ',false},{1,'F',' ',true },{0,' ',' ',false},{2,'G',' ',false},{0,' ',' ',false},{3,'A',' ',true },{4,'B','b',false},{0,' ',' ',false}},     //  5   F_dur
								  {{0,' ',' ',false},{5,'C','#',true },{0,' ',' ',false},{6,'D','#',false},{0,' ',' ',false},{7,'E','#',false},{1,'F','#',true },{0,' ',' ',false},{2,'G','#',false},{0,' ',' ',false},{3,'A','#',true },{4,'B',' ',false}},     //  6   Fis_dur
								  {{4,'C',' ',false},{0,' ',' ',false},{5,'D',' ',true },{0,' ',' ',false},{6,'E',' ',false},{0,' ',' ',false},{7,'F','#',false},{1,'G',' ',true },{0,' ',' ',false},{2,'A',' ',false},{0,' ',' ',false},{3,'B',' ',true }},     //  7   G_dur
								  {{3,'B','#',true },{4,'C','#',false},{0,' ',' ',false},{5,'D','#',true },{0,' ',' ',false},{6,'E','#',false},{0,' ',' ',false},{7,'F','x',false},{1,'G','#',true },{0,' ',' ',false},{2,'A','#',false},{0,' ',' ',false}},     //  8   Gis_dur
								  {{0,' ',' ',false},{3,'C','#',true },{4,'D',' ',false},{0,' ',' ',false},{5,'E',' ',true },{0,' ',' ',false},{6,'F','#',false},{0,' ',' ',false},{7,'G','#',false},{1,'A',' ',true },{0,' ',' ',false},{2,'B',' ',false}},     //  9   A_dur
								  {{2,'B','#',false},{0,' ',' ',false},{3,'C','x',true },{4,'D','#',false},{0,' ',' ',false},{5,'E','#',true },{0,' ',' ',false},{6,'F','x',false},{0,' ',' ',false},{7,'G','x',false},{1,'A','#',true },{0,' ',' ',false}},     // 10   Ais_dur
								  {{0,' ',' ',false},{2,'C','#',false},{0,' ',' ',false},{3,'D','#',true },{4,'E',' ',false},{0,' ',' ',false},{5,'F','#',true },{0,' ',' ',false},{6,'G','#',false},{0,' ',' ',false},{7,'A','#',false},{1,'B',' ',true }},     // 11   B_dur
								  {{7,'C',' ',false},{1,'D','b',true },{0,' ',' ',false},{2,'E','b',false},{0,' ',' ',false},{3,'F',' ',true },{4,'G','b',false},{0,' ',' ',false},{5,'A','b',true },{0,' ',' ',false},{6,'B','b',false},{0,' ',' ',false}},     // 12   Des_dur
								  {{6,'C',' ',false},{0,' ',' ',false},{7,'D',' ',false},{1,'E','b',true },{0,' ',' ',false},{2,'F',' ',false},{0,' ',' ',false},{3,'G',' ',true },{4,'A','b',false},{0,' ',' ',false},{5,'B','b',true },{0,' ',' ',false}},     // 13   Ees_dur
								  {{0,' ',' ',false},{5,'D','b',true },{0,' ',' ',false},{6,'E','b',false},{0,' ',' ',false},{7,'F',' ',false},{1,'G','b',true },{0,' ',' ',false},{2,'A','b',false},{0,' ',' ',false},{3,'B','b',true },{4,'C','b',false}},     // 14   Ges_dur
								  {{3,'C',' ',true },{4,'D','b',false},{0,' ',' ',false},{5,'E','b',true },{0,' ',' ',false},{6,'F',' ',false},{0,' ',' ',false},{7,'G',' ',false},{1,'A','b',true },{0,' ',' ',false},{2,'B','b',false},{0,' ',' ',false}},     // 15   Aes_dur
								  {{2,'C',' ',false},{0,' ',' ',false},{3,'D',' ',true },{4,'E','b',false},{0,' ',' ',false},{5,'F',' ',true },{0,' ',' ',false},{6,'G',' ',false},{0,' ',' ',false},{7,'A',' ',false},{1,'B','b',true },{0,' ',' ',false}},     // 16   Bes_dur
								  {{1,'C',' ',true },{0,' ',' ',false},{2,'D',' ',false},{3,'E','b',true },{0,' ',' ',false},{4,'F',' ',false},{0,' ',' ',false},{5,'G',' ',true },{6,'A','b',false},{0,' ',' ',false},{7,'B','b',false},{0,' ',' ',false}},     // 17   c_moll
								  {{0,' ',' ',false},{1,'C','#',true },{0,' ',' ',false},{2,'D','#',false},{3,'E',' ',true },{0,' ',' ',false},{4,'F','#',false},{0,' ',' ',false},{5,'G','#',true },{6,'A',' ',false},{0,' ',' ',false},{7,'B',' ',false}},     // 18   cis_moll
								  {{7,'C',' ',false},{0,' ',' ',false},{1,'D',' ',true },{0,' ',' ',false},{2,'E',' ',false},{3,'F',' ',true },{0,' ',' ',false},{4,'G',' ',false},{0,' ',' ',false},{5,'A',' ',true },{6,'B','b',false},{0,' ',' ',false}},     // 19   d_moll
								  {{0,' ',' ',false},{7,'C','#',false},{0,' ',' ',false},{1,'D','#',true },{0,' ',' ',false},{2,'E','#',false},{3,'F','#',true },{0,' ',' ',false},{4,'G','#',false},{0,' ',' ',false},{5,'A','#',true },{6,'B',' ',false}},     // 20   dis_moll
								  {{6,'C',' ',false},{0,' ',' ',false},{7,'D',' ',false},{0,' ',' ',false},{1,'E',' ',true },{0,' ',' ',false},{2,'F','#',false},{3,'G',' ',true },{0,' ',' ',false},{4,'A',' ',false},{0,' ',' ',false},{5,'B',' ',true }},     // 21   e_moll
								  {{5,'C',' ',true },{6,'D','b',false},{0,' ',' ',false},{7,'E','b',false},{0,' ',' ',false},{1,'F',' ',true },{0,' ',' ',false},{2,'G',' ',false},{3,'A','b',true },{0,' ',' ',false},{4,'B','b',false},{0,' ',' ',false}},     // 22   f_moll
								  {{0,' ',' ',false},{5,'C','#',true },{6,'D',' ',false},{0,' ',' ',false},{7,'E',' ',false},{0,' ',' ',false},{1,'F','#',true },{0,' ',' ',false},{2,'G','#',false},{3,'A',' ',true },{0,' ',' ',false},{4,'B',' ',false}},     // 23   fis_moll
								  {{4,'C',' ',false},{0,' ',' ',false},{5,'D',' ',true },{6,'E','b',false},{0,' ',' ',false},{7,'F',' ',false},{0,' ',' ',false},{1,'G',' ',true },{0,' ',' ',false},{2,'A',' ',false},{3,'B','b',true },{0,' ',' ',false}},     // 24   g_moll
								  {{0,' ',' ',false},{4,'C','#',false},{0,' ',' ',false},{5,'D','#',true },{6,'E',' ',false},{0,' ',' ',false},{7,'F','#',false},{0,' ',' ',false},{1,'G','#',true },{0,' ',' ',false},{2,'A','#',false},{3,'B',' ',true }},     // 25   gis_moll
								  {{3,'C',' ',true },{0,' ',' ',false},{4,'D',' ',false},{0,' ',' ',false},{5,'E',' ',true },{6,'F',' ',false},{0,' ',' ',false},{7,'G',' ',false},{0,' ',' ',false},{1,'A',' ',true },{0,' ',' ',false},{2,'B',' ',false}},     // 26   a_moll
								  {{2,'C',' ',false},{3,'D','b',true },{0,' ',' ',false},{4,'E','b',false},{0,' ',' ',false},{5,'F',' ',true },{6,'G','b',false},{0,' ',' ',false},{7,'A','b',false},{0,' ',' ',false},{1,'B','b',true },{0,' ',' ',false}},     // 27   bes_moll
								  {{0,' ',' ',false},{2,'C','#',false},{3,'D',' ',true },{0,' ',' ',false},{4,'E',' ',false},{0,' ',' ',false},{5,'F','#',true },{6,'G',' ',false},{0,' ',' ',false},{7,'A',' ',false},{0,' ',' ',false},{1,'B',' ',true }},     // 28   b_moll
								  {{0,' ',' ',false},{1,'D','b',true },{0,' ',' ',false},{2,'E','b',false},{3,'F','b',true },{0,' ',' ',false},{4,'G','b',false},{0,' ',' ',false},{5,'A','b',true },{6,'B','p',false},{0,' ',' ',false},{7,'C','b',false}},     // 29   des_moll
								  {{0,' ',' ',false},{7,'D','b',false},{0,' ',' ',false},{1,'E','b',true },{0,' ',' ',false},{2,'F',' ',false},{3,'G','b',true },{0,' ',' ',false},{4,'A','b',false},{0,' ',' ',false},{5,'B','b',true },{6,'C','b',false}},     // 30   ees_moll
								  {{0,' ',' ',false},{5,'D','b',true },{6,'E','p',false},{0,' ',' ',false},{7,'F','b',false},{0,' ',' ',false},{1,'G','b',true },{0,' ',' ',false},{2,'A','b',false},{3,'B','p',true },{0,' ',' ',false},{4,'C','b',false}},     // 31   ges_moll
								  {{0,' ',' ',false},{4,'D','b',false},{0,' ',' ',false},{5,'E','b',true },{6,'F','b',false},{0,' ',' ',false},{7,'G','b',false},{0,' ',' ',false},{1,'A','b',true },{0,' ',' ',false},{2,'B','b',false},{3,'C','b',true }},     // 32   aes_moll
								  {{2,'B','#',false},{3,'C','#',true },{0,' ',' ',false},{4,'D','#',false},{0,' ',' ',false},{5,'E','#',true },{6,'F','#',false},{0,' ',' ',false},{7,'G','#',false},{0,' ',' ',false},{1,'A','#',true },{0,' ',' ',false}}};    // 33   ais_moll
//==============================================================================================================================================================================================================================================================
struct strutona { string lad; string signton1; string signton2; bool act; int altton; int stp[3]; int bt;  int ntime; int pa[16]; char sa[7][4]; } ton;
struct strutona tona[NT] = {{"major", "C    ","C dur     ",true , 0,{0,2,4}, 0, 3,{ 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'},{'0','1','0','0'},{'0','0','1','0'}}},   //  0
							{"major", "C#   ","Cis dur   ",false, 7,{1,3,5}, 1, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'},{'0','1','0','0'},{'0','0','1','0'}}},   //  1 ___
							{"major", "D    ","D dur     ",true , 2,{1,3,5}, 2, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'},{'0','1','0','0'},{'0','0','1','0'}}},   //  2
							{"major", "D#   ","Dis dur   ",false, 3,{2,4,6}, 3, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'},{'0','1','0','0'},{'0','0','1','0'}}},   //  3 ___
							{"major", "E    ","E dur     ",true , 4,{2,4,6}, 4, 2,{ 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'},{'0','1','0','0'},{'0','0','1','0'}}},   //  4
							{"major", "F    ","F dur     ",true ,-1,{3,5,0}, 5, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'},{'0','1','0','0'},{'0','0','1','0'}}},   //  5
							{"major", "F#   ","Fis dur   ",true , 6,{3,5,0}, 6, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'},{'0','1','0','0'},{'0','0','1','0'}}},   //  6
							{"major", "G    ","G dur     ",true , 1,{4,6,1}, 7, 4,{ 5, 6, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'},{'0','1','0','0'},{'0','0','1','0'}}},   //  7
							{"major", "G#   ","Gis dur   ",false, 6,{5,0,2}, 8, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'},{'0','1','0','0'},{'0','0','1','0'}}},   //  8 ___ x
							{"major", "A    ","A dur     ",true , 3,{5,0,2}, 9, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'},{'0','1','0','0'},{'0','0','1','0'}}},   //  9
							{"major", "A#   ","Ais dur   ",false, 4,{6,1,3},10, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'},{'0','1','0','0'},{'0','0','1','0'}}},   // 10 ___ x x x
							{"major", "B    ","B dur     ",true , 5,{6,1,3},11, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'},{'0','1','0','0'},{'0','0','1','0'}}},   // 11
							{"major", "Db   ","Des dur   ",true ,-5,{1,3,5}, 1, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'},{'0','1','0','0'},{'0','0','1','0'}}},   // 12
							{"major", "Eb   ","Ees dur   ",true ,-3,{2,4,6}, 3, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'},{'0','1','0','0'},{'0','0','1','0'}}},   // 13
							{"major", "Gb   ","Ges dur   ",false,-6,{3,5,0}, 6, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'},{'0','1','0','0'},{'0','0','1','0'}}},   // 14 ___
							{"major", "Ab   ","Aes dur   ",true ,-4,{5,0,2}, 8, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'},{'0','1','0','0'},{'0','0','1','0'}}},   // 15
							{"major", "Bb   ","Bes dur   ",true ,-2,{6,1,3},10, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'},{'0','1','0','0'},{'0','0','1','0'}}},   // 16
							{"minor", "Cm   ","c moll    ",true ,-3,{0,2,4}, 0, 1,{ 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'0','1','0','0'},{'0','0','1','0'},{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'}}},   // 17
							{"minor", "C#m  ","cis moll  ",true , 4,{0,2,4}, 1, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'0','1','0','0'},{'0','0','1','0'},{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'}}},   // 18
							{"minor", "Dm   ","d moll    ",true ,-1,{1,3,5}, 2, 1,{10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'0','1','0','0'},{'0','0','1','0'},{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'}}},   // 19
							{"minor", "D#m  ","dis moll  ",true , 6,{1,3,5}, 3, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'0','1','0','0'},{'0','0','1','0'},{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'}}},   // 20
							{"minor", "Em   ","e moll    ",true , 1,{2,4,6}, 4, 6,{11,12,13,14,15,16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'0','1','0','0'},{'0','0','1','0'},{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'}}},   // 21
							{"minor", "Fm   ","f moll    ",true ,-4,{3,5,0}, 5, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'0','1','0','0'},{'0','0','1','0'},{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'}}},   // 22
							{"minor", "F#m  ","fis moll  ",true , 3,{3,5,0}, 6, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'0','1','0','0'},{'0','0','1','0'},{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'}}},   // 23
							{"minor", "Gm   ","g moll    ",true ,-2,{4,6,1}, 7, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'0','1','0','0'},{'0','0','1','0'},{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'}}},   // 24
							{"minor", "G#m  ","gis moll  ",true , 5,{4,6,1}, 8, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'0','1','0','0'},{'0','0','1','0'},{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'}}},   // 25
							{"minor", "Am   ","a moll    ",true , 0,{5,0,2}, 9, 5,{17,18,19,20,21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'0','1','0','0'},{'0','0','1','0'},{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'}}},   // 26
							{"minor", "Bbm  ","bes moll  ",true ,-5,{6,1,3},10, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'0','1','0','0'},{'0','0','1','0'},{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'}}},   // 27
							{"minor", "Bm   ","b moll    ",true , 2,{6,1,3},11, 1,{22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'0','1','0','0'},{'0','0','1','0'},{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'}}},   // 28
							{"minor", "Dbm  ","des moll  ",false,-6,{0,2,4}, 1, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'0','1','0','0'},{'0','0','1','0'},{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'}}},   // 29 ___ p
							{"minor", "Ebm  ","ees moll  ",false,-6,{1,3,5}, 3, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'0','1','0','0'},{'0','0','1','0'},{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'}}},   // 30 ___
							{"minor", "Gbm  ","ges moll  ",false,-5,{3,5,0}, 6, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'0','1','0','0'},{'0','0','1','0'},{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'}}},   // 31 ___ p p
							{"minor", "Abm  ","aes moll  ",false,-7,{4,6,1}, 8, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'0','1','0','0'},{'0','0','1','0'},{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'}}},   // 32 ___
							{"minor", "A#m  ","ais moll  ",false, 7,{6,1,3},10, 0,{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},{{'0','1','0','0'},{'0','0','1','0'},{'1','0','1','0'},{'0','1','0','1'},{'0','1','0','0'},{'1','0','1','0'},{'1','0','0','1'}}}};  // 33 ___
//==============================================================================================================================================================================================================================================================
struct strumatakk { int ntime; int akkord[8][9]; int ritm; string poslkon; } posakk;
struct strumatakk matakk[GGA] = {{4,{{5,0, 0,0, 0,0, 0,0, 0},{5,5, 0,5, 0,5, 0,5, 0},{5,3, 0,3, 0,3, 0,3, 0},{5,4, 0,4, 0,4, 0,4, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    VI   IV   V"                     },   //  0   | C  | T -6 -S -D             | C   -Am  -F   -G                     | аккорды к песне “Ищу баб” из Камеди        |
								 {5,{{5,0, 0,0, 0,0, 0,0, 0},{5,4, 0,4, 0,4, 0,4, 0},{5,5, 0,5, 0,5, 0,5, 0},{5,3, 0,3, 0,3, 0,3, 0},{5,4, 0,4, 0,4, 0,4, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    V    VI   IV   V"                },   //  1   | C  | T -D -6 -S -D          | C   -G   -Am  -F   -G                | Очень много песен: например, Ой - йо…      |
								 {4,{{5,0, 0,0, 0,0, 0,0, 0},{7,2,24,2,24,2,24,2,24},{5,5, 0,5, 0,5, 0,5, 0},{5,3, 0,3, 0,3, 0,3, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    III? VI   IV"                    },   //  2 ? | C  | T -3 -6 -S             | C   -E7  -Am  -F                     | Для американских песен                     |
								 {4,{{5,0, 0,0, 0,0, 0,0, 0},{5,5, 0,5, 0,5, 0,5, 0},{5,3, 0,3, 0,3, 0,3, 0},{5,4, 0,4, 0,4, 0,4, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    VI   IV   V"                     },   //  3   | E  | T -6 -S -D             | E   -C#m -A   -H                     | наиболее распространена                    |
								 {7,{{5,0, 0,0, 0,0, 0,0, 0},{5,3, 0,3, 0,3, 0,3, 0},{5,0, 0,0, 0,0, 0,0, 0},{5,3, 0,3, 0,3, 0,3, 0},{5,4, 0,4, 0,4, 0,4, 0},{5,3, 0,3, 0,3, 0,3, 0},{5,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    IV   I    IV   V    IV   I"      },   //  4   | E  | T -S -T -S -D -S -T    | E   -A   -E   -A   -H   -A   -E      | Рок’н’ролл                                 |
								 {8,{{5,0, 0,0, 0,0, 0,0, 0},{5,3, 0,3, 0,3, 0,3, 0},{5,0, 0,0, 0,0, 0,0, 0},{5,4, 0,4, 0,4, 0,4, 0},{5,0, 0,0, 0,0, 0,0, 0},{5,3, 0,3, 0,3, 0,3, 0},{5,0, 0,0, 0,4, 0,4, 0},{5,0, 0,0, 0,0, 0,0, 0}},RC-3,"I    IV   I    V    I    IV   I_V  I" },   //  5   | G  | T -S -T -D -T -S -TD-T | G   -C   -G   -D   -G   -C   -GD  -G | Стиль кантри - Базовая  последовательность |
								 {4,{{5,0, 0,0, 0,0, 0,0, 0},{5,4, 0,4, 0,4, 0,4, 0},{5,1, 0,1, 0,1, 0,1, 0},{5,3, 0,3, 0,3, 0,3, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    V    II   IV"                    },   //  6   | G  | T -D -M -S             | G   -D   -Am  -C                     | наиболее распространена                    |
								 {4,{{5,0, 0,0, 0,0, 0,0, 0},{5,5, 0,5, 0,5, 0,5, 0},{5,3, 0,3, 0,3, 0,3, 0},{5,4, 0,4, 0,4, 0,4, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    VI   IV   V"                     },   //  7   | G  | T -6 -S -D             | G   -Em  -C   -D                     | наиболее распространена                    |
								 {2,{{5,0, 0,0, 0,0, 0,0, 0},{5,4, 0,4, 0,4, 0,4, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    V"                               },   //  8   | G  | T -D                   | G   -D                               | наиболее популярная вводная связка         |
								 {4,{{5,0, 0,0, 0,0, 0,0, 0},{5,2,14,2,14,2,14,2,14},{5,3, 0,3, 0,3, 0,3, 0},{5,3, 0,3, 0,3, 0,3, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    III? IV   IV"                    },   //  9 ? | Cm | T -3 -S -S             | Cm  -Ebm -Fm  -Fm                    | джаз рок                                   |
								 {4,{{5,0, 0,0, 0,0, 0,0, 0},{5,5, 0,5, 0,5, 0,5, 0},{5,3, 0,3, 0,3, 0,3, 0},{5,3, 0,3, 0,3, 0,3, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    VI   IV   IV"                    },   // 10   | Dm | T -6 -S -S             | Dm  -Bb  -Gm  -Gm                    | Rock Academy - 11.11.2018                  |
								 {4,{{5,0, 0,0, 0,0, 0,0, 0},{5,5, 0,5, 0,5, 0,5, 0},{5,6, 0,6, 0,6, 0,6, 0},{5,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    VI   VII  I"                     },   // 11   | Em | T -6 -7 -T             | Em  -C   -D   -Em                    | наиболее распространена                    |
								 {4,{{5,0, 0,0, 0,0, 0,0, 0},{5,6, 0,6, 0,6, 0,6, 0},{5,5, 0,5, 0,5, 0,5, 0},{5,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    VII  VI   I"                     },   // 12   | Em | T -7 -6 -T             | Em  -D   -C   -Em                    | наиболее распространена и попсовые песни   |
								 {4,{{5,0, 0,0, 0,0, 0,0, 0},{5,6, 0,6, 0,6, 0,6, 0},{5,3, 0,3, 0,3, 0,3, 0},{5,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    VII  IV   I"                     },   // 13   | Em | T -7 -S -T             | Em  -D   -Am  -Em                    | наиболее распространена и попсовые песни   |
								 {5,{{5,0, 0,0, 0,0, 0,0, 0},{5,5, 0,5, 0,5, 0,5, 0},{5,3, 0,3, 0,3, 0,3, 0},{5,6, 0,6, 0,6, 0,6, 0},{5,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    VI   IV   VII  I"                },   // 14   | Em | T -6 -S -7 -T          | Em  -C   -Am  -D   -Em               | наиболее распространена                    |
								 {5,{{5,0, 0,0, 0,0, 0,0, 0},{5,3, 0,3, 0,3, 0,3, 0},{5,5, 0,5, 0,5, 0,5, 0},{5,6, 0,6, 0,6, 0,6, 0},{5,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    IV   VI   VII  I"                },   // 15   | Em | T -S -6 -7 -T          | Em  -Am  -C   -D   -Em               | наиболее распространена                    |
								 {4,{{5,0, 0,0, 0,0, 0,0, 0},{5,5, 0,5, 0,5, 0,5, 0},{5,3, 0,3, 0,3, 0,3, 0},{7,4,26,4,26,4,26,4,26},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    VI   IV   Vg"                    },   // 16 g | Em | T -6 -S -D             | Em  -C   -Am  -H7g                   | попсовые песни                             |
								 {4,{{5,0, 0,0, 0,0, 0,0, 0},{5,3, 0,3, 0,3, 0,3, 0},{5,4,26,4,26,4,26,4,26},{5,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    IV   Vg   I"                     },   // 17 g | Am | T -S -D -T             | Am  -Dm  -Eg  -Am                    | наиболее распространена                    |
								 {4,{{5,0, 0,0, 0,0, 0,0, 0},{5,2, 0,2, 0,2, 0,2, 0},{5,4,26,4,26,4,26,4,26},{5,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    III  Vg   I"                     },   // 18 g | Am | T -3 -D -T             | Am  -C   -Eg  -Am                    | наиболее распространена                    |
								 {6,{{5,0, 0,0, 0,0, 0,0, 0},{5,3, 0,3, 0,3, 0,3, 0},{5,6, 0,6, 0,6, 0,6, 0},{5,2, 0,2, 0,2, 0,2, 0},{5,4,26,4,26,4,26,4,26},{5,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    IV   VII  III  Vg   I"           },   // 19 g | Am | T -S -7 -3 -D -T       | Am  -Dm  -G   -C   -Eg  -Am          | наиболее сложная. Армейские песни          |
								 {5,{{5,0, 0,0, 0,0, 0,0, 0},{5,6, 0,6, 0,6, 0,6, 0},{5,2, 0,2, 0,2, 0,2, 0},{5,4,26,4,26,4,26,4,26},{5,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    VII  III  Vg   I"                },   // 20 g | Am | T -7 -3 -D -T          | Am  -G   -C   -Eg  -Am               | для многих песен наших Российских групп    |
								 {5,{{5,0, 0,0, 0,0, 0,0, 0},{5,5, 0,5, 0,5, 0,5, 0},{5,2, 0,2, 0,2, 0,2, 0},{5,4,26,4,26,4,26,4,26},{5,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    VI   III  Vg   I"                },   // 21 g | Am | T -6 -3 -D -T          | Am  -F   -C   -Eg  -Am               | для многих песен наших Российских групп    |
								 {4,{{5,0, 0,0, 0,0, 0,0, 0},{5,3, 0,3, 0,3, 0,3, 0},{5,4,26,4,26,4,26,4,26},{5,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0}},  -1,"I    IV   Vg   I"                     },   // 22 g | Bm | T -S -D -T             | Hm  -Em  -F#g -Hm                    | наиболее распространена                    |
//================================================================================================================================================================================================================================================================================================================================================================================================================
								 {8,{{7,0, 0,0, 0,0, 0,0, 0},{7,0, 0,0, 0,0, 0,0, 0},{7,2, 0,2, 0,2, 0,2, 0},{7,2, 0,2, 0,2, 0,2, 0},{7,0, 0,0, 0,0, 0,0, 0},{7,0, 0,0, 0,0, 0,0, 0},{7,6, 0,6 ,0,6, 0,6, 0},{7,3 ,0,3, 0,3, 0,3, 0}},  -1,"I    I    III  III  I    I    VII  IV"},   // 23   |    | T -T -3 -3 -T -T -7 -S | I---I---III-III-I---I---VII-IV       | Вариант Лаврова                            |
								 {3,{{7,0, 0,0, 0,0, 0,0, 0},{5,3, 0,3, 0,3, 0,3, 0},{7,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0 ,0,0, 0,0, 0},{0,0 ,0,0, 0,0, 0,0, 0}},  -1,"I    IV   I"                          },   // 24   |    | T -S -T                | I---IV--I                            | Очень простой первый вариант               |
								 {3,{{7,0, 0,0, 0,0, 0,0, 0},{7,4, 0,4, 0,4, 0,4, 0},{7,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0 ,0,0, 0,0, 0},{0,0 ,0,0, 0,0, 0,0, 0}},  -1,"I    V    I"                          },   // 25   |    | T -D -T                | I---V---I                            | Очень простой второй вариант               |
								 {4,{{7,0, 0,0, 0,0, 0,0, 0},{5,3, 0,3, 0,3, 0,3, 0},{7,1, 0,1, 0,1, 0,1, 0},{7,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0 ,0,0, 0,0, 0},{0,0 ,0,0, 0,0, 0,0, 0}},  -1,"I    IV   II   I"                     },   // 26   |    | T -S -M -T             | I---IV--II--I                        | Простой первый вариант с медиантой         |
								 {4,{{7,0, 0,0, 0,0, 0,0, 0},{5,3, 0,3, 0,3, 0,3, 0},{7,4, 0,4, 0,4, 0,4, 0},{7,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0 ,0,0, 0,0, 0},{0,0 ,0,0, 0,0, 0,0, 0}},  -1,"I    IV   V    I"                     },   // 27   |    | T -S -D -T             | I---IV--V---I                        | Простой первый вариант                     |
								 {4,{{7,0, 0,0, 0,0, 0,0, 0},{5,2, 0,2, 0,2, 0,2, 0},{7,4, 0,4, 0,4, 0,4, 0},{7,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0 ,0,0, 0,0, 0},{0,0 ,0,0, 0,0, 0,0, 0}},  -1,"I    III  V    I"                     },   // 28   |    | T -3 -D -T             | I---III-V---I                        | Простой второй вариант                     |
								 {4,{{7,0, 0,0, 0,0, 0,0, 0},{7,4, 0,4, 0,4, 0,4, 0},{5,5, 0,5, 0,5, 0,5, 0},{5,3, 0,3, 0,3, 0,3, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0 ,0,0, 0,0, 0},{0,0 ,0,0, 0,0, 0,0, 0}},  -1,"I    V    VI   IV"                    },   // 29   |    | T -D -6 -S             | I---V---VI--IV                       | Денис Чуфаров                              |
								 {5,{{7,0, 0,0, 0,0, 0,0, 0},{5,3, 0,3, 0,3, 0,3, 0},{7,1, 0,1, 0,1, 0,1, 0},{7,4, 0,4, 0,4, 0,4, 0},{7,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0 ,0,0, 0,0, 0},{0,0 ,0,0, 0,0, 0,0, 0}},  -1,"I    IV   II   V    I"                },   // 30   |    | T -S -M -D -T          | I---IV--II--V---I                    | Простой первый вариант с медиантой         |
								 {5,{{7,0, 0,0, 0,0, 0,0, 0},{5,3, 0,3, 0,3, 0,3, 0},{7,6, 0,6, 0,6, 0,6, 0},{5,2, 0,2, 0,2, 0,2, 0},{5,5, 0,5, 0,5, 0,5, 0},{0,0, 0,0, 0,0, 0,0, 0},{0,0, 0,0 ,0,0, 0,0, 0},{0,0 ,0,0, 0,0, 0,0, 0}},  -1,"I    IV   VII  III  VI"               },   // 31   |    | T -S -7 -3 -6          | I---IV--VII-III-VI                   | квартовый круг 5                           |
								 {6,{{7,0, 0,0, 0,0, 0,0, 0},{5,3, 0,3, 0,3, 0,3, 0},{7,1, 0,1, 0,1, 0,1, 0},{7,6, 0,6, 0,6, 0,6, 0},{5,2, 0,2, 0,2, 0,2, 0},{5,5, 0,5, 0,5, 0,5, 0},{0,0, 0,0 ,0,0, 0,0, 0},{0,0 ,0,0, 0,0, 0,0, 0}},  -1,"I    IV   II   VII  III  VI"          },   // 32   |    | T -S -M -7 -3 -6       | I---IV--II--VII-III-VI               | квартовый круг 5 с медиантой               |
								 {6,{{7,0, 0,0, 0,0, 0,0, 0},{5,3, 0,3, 0,3, 0,3, 0},{7,4, 0,4, 0,4, 0,4, 0},{5,5, 0,5, 0,5, 0,5, 0},{5,1, 0,1, 0,1, 0,1, 0},{5,2, 0,2, 0,2, 0,2, 0},{0,0, 0,0 ,0,0, 0,0, 0},{0,0 ,0,0, 0,0, 0,0, 0}},  -1,"I    IV   V    VI   II   III"         },   // 33   |    | T -S -D -6 -M -3       | I---IV--V---VI--II--III              | Guitar College - 17.12.2018 major          |
								 {6,{{7,0, 0,0, 0,0, 0,0, 0},{5,3, 0,3, 0,3, 0,3, 0},{7,4, 0,4, 0,4, 0,4, 0},{5,2, 0,2, 0,2, 0,2, 0},{5,5, 0,5, 0,5, 0,5, 0},{7,6, 0,6, 0,6, 0,6, 0},{0,0, 0,0 ,0,0, 0,0, 0},{0,0 ,0,0, 0,0, 0,0, 0}},  -1,"I    IV   V    III  VI   VII"         },   // 34   |    | T -S -D -3 -6 -7       | I---IV--V---III-VI--VII              | Guitar College - 17.12.2018 minor          |
								 {7,{{7,0, 0,0, 0,0, 0,0, 0},{7,4, 0,4, 0,4, 0,4, 0},{5,1, 0,1, 0,1, 0,1, 0},{5,5, 0,5, 0,5, 0,5, 0},{5,2, 0,2, 0,2, 0,2, 0},{7,6, 0,6, 0,6, 0,6, 0},{5,3, 0,3 ,0,3, 0,3, 0},{0,0 ,0,0, 0,0, 0,0, 0}},  -1,"I    V    II   VI   III  VII  IV"     },   // 35   |    | T -D -M -6 -3 -7 -S    | I---V---II--VI--III-VII-IV           | квинтовый круг 7                           |
								 {7,{{7,0, 0,0, 0,0, 0,0, 0},{5,3, 0,3, 0,3, 0,3, 0},{7,6, 0,6, 0,6, 0,6, 0},{5,2, 0,2, 0,2, 0,2, 0},{5,5, 0,5, 0,5, 0,5, 0},{5,1, 0,1, 0,1, 0,1, 0},{7,4, 0,4 ,0,4, 0,4, 0},{0,0 ,0,0, 0,0, 0,0, 0}},  -1,"I    IV   VII  III  VI   II   V"      },   // 36   |    | T -S -7 -3 -6 -M -D    | I---IV--VII-III-VI--II--V            | квартовый круг 7                           |
								 {8,{{7,0, 0,0, 0,0, 0,0, 0},{7,6, 0,6, 0,6, 0,6, 0},{5,1, 0,1, 0,1, 0,1, 0},{5,5, 0,5, 0,5, 0,5, 0},{5,2, 0,2, 0,2, 0,2, 0},{7,4, 0,4, 0,4, 0,4, 0},{5,3, 0,3 ,0,3, 0,3, 0},{7,0 ,0,0, 0,0, 0,0, 0}},  -1,"I    VII  II   VI   III  V    IV   I" }};  // 37   |    | T -7 -M -6 -3 -D -S -T | I---VII-II--VI--III-V---IV--I        | все семь аккордов                          |
//==============================================================================================================================================================================================================================================================
int a30[7][12][3] = {{{  0,  2,  4},{  7,  2,  4},{  0,  2, -3},{  7,  2, -3},{  0,  9,  4},{  0, -5,  4},{  0, -5, -3},{ -7,  2, -3},{ -7, -5, -3},{  0, -5,-10},{ -7, -5,-10},{ -7,-12, -3}},
					 {{  1,  3,  5},{  1,  3, -2},{  8,  3,  5},{  1, -4,  5},{  8,  3, -2},{  1, -4, -2},{  1, 10,  5},{ -6,  3, -2},{ -6, -4, -2},{  1, -4, -9},{ -6, -4, -9},{ -6,-11, -2}},
					 {{  2,  4, -1},{  2,  4,  6},{  2, -3, -1},{  2, -3,  6},{  9,  4, -1},{ -5,  4, -1},{  9,  4,  6},{ -5, -3, -1},{  2, 11,  6},{  2, -3, -8},{ -5, -3, -8},{ -5,-10, -1}},
					 {{  3,  5,  0},{  3, -2,  0},{  3,  5,  7},{  3, -2,  7},{ -4,  5,  0},{ -4, -2,  0},{ 10,  5,  0},{ 10,  5,  7},{  3, -2, -7},{  3, 12,  7},{ -4, -2, -7},{ -4, -9,  0}},
					 {{  4, -1,  1},{  4,  6,  1},{ -3, -1,  1},{ -3,  6,  1},{  4, -1,  8},{  4,  6,  8},{  4, -1, -6},{ 11,  6,  1},{ -3, -1, -6},{ -3, -8,  1},{ 11,  6,  8},{  4, 13,  8}},
					 {{  5,  0,  2},{ -2,  0,  2},{  5,  7,  2},{ -2,  7,  2},{  5,  0,  9},{  5,  0, -5},{ -2,  0, -5},{  5,  7,  9},{ -2, -7,  2},{ 12,  7,  2},{ 12,  7,  9},{  5, 14,  9}},
					 {{ -1,  1,  3},{  6,  1,  3},{ -1,  1, -4},{ -1,  8,  3},{  6,  8,  3},{  6,  1, -4},{ -1, -6,  3},{  6,  1, 10},{  6,  8, 10},{ 13,  8,  3},{ 13,  8, 10},{  6, 15, 10}}};
int a31[7][ 6][4] = {{{  0,  2, -3,  4},{  0,  2,  4,  7},{  0, -5, -3,  2},{  7,  2,  4,  9},{ -7, -5, -3,  0},{  7,  9,  4, 11}},
		 	 	 	 {{  1,  3, -2,  5},{  1,  3,  5,  8},{  1, -4, -2,  3},{  8,  3,  5, 10},{ -6, -4, -2,  1},{  8, 10,  5, 12}},
					 {{  2,  4, -1,  6},{  2, -3, -1,  4},{  2,  4,  6,  9},{ -5, -3, -1,  2},{  9,  4,  6, 11},{  9, 11,  6, 13}},
					 {{  3, -2,  0,  5},{  3,  5,  0,  7},{ -4, -2,  0,  3},{  3,  5,  7, 10},{ 10,  5,  7, 12},{ 10, 12,  7, 14}},
					 {{  4, -1,  1,  6},{ -3, -1,  1,  4},{  4,  6,  1,  8},{  4,  6,  8, 11},{ 11,  6,  8, 13},{ 11, 13,  8, 15}},
					 {{ -2,  0,  2,  5},{  5,  0,  2,  7},{  5,  7,  2,  9},{  5,  7,  9, 12},{ 12,  7,  9, 14},{ 12, 14,  9, 16}},
					 {{ -1,  1,  3,  6},{  6,  1,  3,  8},{  6,  8,  3, 10},{  6,  8, 10, 13},{ 13,  8, 10, 15},{ 13, 15, 10, 17}}};
int a40[7][24][4] = {{{  0,  2,  4, -1},{  0,  2,  4,  6},{  0,  2, -3, -1},{  7,  2,  4, -1},{  7,  2,  4,  6},{  0,  2, -3,  6},{  7,  2, -3, -1},{  7,  2, -3,  6},{  0,  9,  4, -1},{  0,  9,  4,  6},{  0, -5,  4,  6},{  7, -5,  4, -1},{  7,  9,  4, -1},{  0,  9, -3,  6},{  0,  2, 11,  6},{  7,  2, 11, -1},{  7,  2, 11,  6},{ -7,  9,  4, -1},{  0,  9, 11,  6},{  0, -5, 11,  6},{  7,  2,  4, 13},{  7,  2, -3, 13},{  0,  9,  4, 13},{ 14,  9,  4, -1}},
					 {{  1,  3,  5,  0},{  1,  3, -2,  0},{  1,  3,  5,  7},{  1,  3, -2,  7},{  8,  3,  5,  0},{  8,  3, -2,  0},{  1, -4,  5,  7},{  8,  3,  5,  7},{  1, -4, -2,  7},{  8,  3, -2,  7},{  1, 10,  5,  0},{  8, -4,  5,  0},{  1, 10,  5,  7},{ -6,  3, -2,  7},{  1, 10, -2,  7},{  8, 10,  5,  0},{  1,  3, 12,  7},{  8,  3, -2, -7},{ -6, 10,  5,  0},{  8,  3, 12,  0},{  1, -4, 12,  7},{  8,  3, 12,  7},{  1, 10, 12,  7},{  8,  3, -2, 14}},
					 {{  2,  4, -1,  1},{  2,  4,  6,  1},{  2,  4, -1,  8},{  2,  4,  6,  8},{  9,  4, -1,  1},{  2, -3, -1,  8},{  9,  4,  6,  1},{ -5,  4,  6,  1},{  2, -3,  6,  8},{  9, -3,  6,  1},{ -5,  4, -1,  8},{  9,  4, -1,  8},{  2, 11,  6,  1},{  9,  4,  6,  8},{  2, 11, -1,  8},{  9,  4, -1, -6},{  2, 11,  6,  8},{ -5, 11,  6,  1},{  9, 11,  6,  1},{  2,  4, 13,  8},{  2, -3, -8,  8},{  9,  4, 13,  1},{  2, -3, 13,  8},{  9,  4, 13,  8}},
					 {{  3,  5,  0,  2},{  3, -2,  0,  2},{  3,  5,  7,  2},{  3, -2,  7,  2},{  3,  5,  0,  9},{  3,  5,  0, -5},{ -4,  5,  7,  2},{  3, -2,  0,  9},{ -4, -2,  7,  2},{ 10,  5,  0,  2},{  3,  5,  7,  9},{  3, -2,  7,  9},{  3, -2,  7, -5},{ -4,  5,  0,  9},{ 10,  5,  7,  2},{ 10, -2,  7,  2},{ 10,  5,  0,  9},{  3, 12,  7,  2},{ 10,  5,  0, -5},{  3, -2, -7,  9},{  3, 12,  0,  9},{ -4, 12,  7,  2},{  3, 12,  7,  9},{  3, -2, 14,  9}},
					 {{  4, -1,  1,  3},{  4,  6,  1,  3},{ -3,  6,  1,  3},{  4, -1,  8,  3},{  4,  6,  8,  3},{  4,  6,  1, -4},{ -3, -1,  8,  3},{ -3,  6,  8,  3},{  4, -1,  1, 10},{  4,  6,  1, 10},{  4, -1,  8, -4},{ 11,  6,  1,  3},{ -3,  6,  1, 10},{  4, -1,  8, 10},{  4,  6,  8, 10},{ 11, -1,  8,  3},{ 11,  6,  8,  3},{ 11,  6,  1, -4},{  4, -1, -6, 10},{ -3, -8,  8,  3},{ 11,  6,  1, 10},{  4, 13,  8,  3},{ -3, 13,  8,  3},{  4, 13,  1, 10}},
					 {{  5,  0,  2,  4},{ -2,  0,  2,  4},{  5,  7,  2,  4},{  5,  0,  2, -3},{ -2,  7,  2,  4},{  5,  7,  2, -3},{  5,  0,  9,  4},{  5,  0, -5,  4},{ -2,  7,  2, -3},{ -2,  0,  9,  4},{  5,  0, -5, -3},{  5,  7,  9,  4},{  5,  0,  9, -3},{ -2,  7,  9,  4},{  5,  0,  2, 11},{ -2,  7, -5,  4},{  5,  7,  2, 11},{ -2,  7,  2, 11},{  5,  0,  9, 11},{  5,  0, -5, 11},{ -2, -7,  9,  4},{ 12,  7,  2, -3},{ 12,  0,  9,  4},{ -2, 14,  9,  4}},
					 {{ -1,  1,  3,  5},{  6,  1,  3,  5},{ -1,  1,  3, -2},{  6,  1,  3, -2},{ -1,  8,  3,  5},{  6,  1, -4,  5},{  6,  8,  3,  5},{ -1,  8,  3, -2},{  6,  1, -4, -2},{  6,  8,  3, -2},{ -1,  1, 10,  5},{ -1, -6,  3,  5},{  6,  1, 10,  5},{ -1,  8, -4,  5},{  6,  1, 10, -2},{ -1,  8, 10,  5},{  6,  1,  3, 12},{ -1,  8,  3, 12},{ -1, -6, 10,  5},{ -8,  8,  3, -2},{  6,  8,  3, 12},{  6,  1, -4, 12},{ 13,  8,  3, -2},{ 13,  1, 10,  5}}};
int tfish[3][4] = {{7,1,5,6},{1,2,3,4},{2,3,4,0}};

int mldris08[8][16] =  {{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15},  //  1-1111 1112 1121 1122 1211 1212 1221 1222 2111 2112 2121 2122 2211 2212 2221 2222
						{ 0, 3, 5, 6, 9,10,12,15, 0, 3, 5, 6, 9,10,12,15},  //  2-1111 1122 1212 1221 2112 2121 2211 2222                                        
						{ 3, 5, 6, 9,10,12, 3, 5, 6, 9,10,12, 3, 6, 9,12},  //  3-1122 1212 1221 2112 2121 2211                                                  
						{ 0,15, 0,15, 0,15, 0,15, 0,15, 0,15, 0,15, 0,15},  //  4-1111 2222                                                                      
						{ 1, 2, 4, 8, 1, 2, 4, 8, 1, 2, 4, 8, 1, 2, 4, 8},  //  5-1112 1121 1211 2111                                                            
						{ 3, 5, 6, 9,10,12, 3, 5, 6, 9,10,12, 3, 6, 9,12},  //  6-1122 1212 1221 2112 2121 2211                                                  
						{ 7,11,13,14, 7,11,13,14, 7,11,13,14, 7,11,13,14},  //  7-1222 2122 2212 2221                                                            
						{15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15}}; //  8-2222                                                                           

int mldris16[16][256] = {{  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255},  //  1
		       			 {  0,  3,  5,  6,  9, 10, 12, 15, 17, 18, 20, 23, 24, 27, 29, 30, 33, 34, 36, 39, 40, 43, 45, 46, 48, 51, 53, 54, 57, 58, 60, 63, 65, 66, 68, 71, 72, 75, 77, 78, 80, 83, 85, 86, 89, 90, 92, 95, 96, 99,101,102,105,106,108,111,113,114,116,119,120,123,125,126,129,130,132,135,136,139,141,142,144,147,149,150,153,154,156,159,160,163,165,166,169,170,172,175,177,178,180,183,184,187,189,190,192,195,197,198,201,202,204,207,209,210,212,215,216,219,221,222,225,226,228,231,232,235,237,238,240,243,245,246,249,250,252,255,  0,  3,  5,  6,  9, 10, 12, 15, 17, 18, 20, 23, 24, 27, 29, 30, 33, 34, 36, 39, 40, 43, 45, 46, 48, 51, 53, 54, 57, 58, 60, 63, 65, 66, 68, 71, 72, 75, 77, 78, 80, 83, 85, 86, 89, 90, 92, 95, 96, 99,101,102,105,106,108,111,113,114,116,119,120,123,125,126,129,130,132,135,136,139,141,142,144,147,149,150,153,154,156,159,160,163,165,166,169,170,172,175,177,178,180,183,184,187,189,190,192,195,197,198,201,202,204,207,209,210,212,215,216,219,221,222,225,226,228,231,232,235,237,238,240,243,245,246,249,250,252,255},  //  2
		       			 {  1,  2,  4,  8, 15, 16, 23, 27, 29, 30, 32, 39, 43, 45, 46, 51, 53, 54, 57, 58, 60, 64, 71, 75, 77, 78, 83, 85, 86, 89, 90, 92, 99,101,102,105,106,108,113,114,116,120,127,128,135,139,141,142,147,149,150,153,154,156,163,165,166,169,170,172,177,178,180,184,191,195,197,198,201,202,204,209,210,212,216,223,225,226,228,232,239,240,247,251,253,254,  1,  2,  4,  8, 15, 16, 23, 27, 29, 30, 32, 39, 43, 45, 46, 51, 53, 54, 57, 58, 60, 64, 71, 75, 77, 78, 83, 85, 86, 89, 90, 92, 99,101,102,105,106,108,113,114,116,120,127,128,135,139,141,142,147,149,150,153,154,156,163,165,166,169,170,172,177,178,180,184,191,195,197,198,201,202,204,209,210,212,216,223,225,226,228,232,239,240,247,251,253,254,  1,  2,  4,  8, 15, 16, 23, 27, 29, 30, 32, 39, 43, 45, 46, 51, 53, 54, 57, 58, 60, 64, 71, 75, 77, 78, 83, 85, 86, 89, 90, 92, 99,101,102,105,106,108,113,114,116,120,127,128,135,139,141,142,147,149,150,153,154,156,163,165,166,169,170,172,177,178,180,184,191,195,197,198,201,202,204,209,210,212,216,223,225,226,228,232,239,240,247,251},  //  3
		       			 {  0, 15, 23, 27, 29, 30, 39, 43, 45, 46, 51, 53, 54, 57, 58, 60, 71, 75, 77, 78, 83, 85, 86, 89, 90, 92, 99,101,102,105,106,108,113,114,116,120,135,139,141,142,147,149,150,153,154,156,163,165,166,169,170,172,177,178,180,184,195,197,198,201,202,204,209,210,212,216,225,226,228,232,240,255,  0, 15, 23, 27, 29, 30, 39, 43, 45, 46, 51, 53, 54, 57, 58, 60, 71, 75, 77, 78, 83, 85, 86, 89, 90, 92, 99,101,102,105,106,108,113,114,116,120,135,139,141,142,147,149,150,153,154,156,163,165,166,169,170,172,177,178,180,184,195,197,198,201,202,204,209,210,212,216,225,226,228,232,240,255,  0, 15, 23, 27, 29, 30, 39, 43, 45, 46, 51, 53, 54, 57, 58, 60, 71, 75, 77, 78, 83, 85, 86, 89, 90, 92, 99,101,102,105,106,108,113,114,116,120,135,139,141,142,147,149,150,153,154,156,163,165,166,169,170,172,177,178,180,184,195,197,198,201,202,204,209,210,212,216,225,226,228,232,240,255,  0, 15, 23, 27, 29, 30, 39, 43, 45, 46, 51, 53, 54, 57, 58, 60, 71, 75, 77, 78, 83, 85, 86, 89, 90, 92, 99,101,102,105,106,108,113,114,116,120,135,139,141,142},  //  4
		       			 {  3,  5,  6,  9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96,127,129,130,132,136,144,160,191,192,223,239,247,251,253,254,  3,  5,  6,  9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96,127,129,130,132,136,144,160,191,192,223,239,247,251,253,254,  3,  5,  6,  9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96,127,129,130,132,136,144,160,191,192,223,239,247,251,253,254,  3,  5,  6,  9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96,127,129,130,132,136,144,160,191,192,223,239,247,251,253,254,  3,  5,  6,  9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96,127,129,130,132,136,144,160,191,192,223,239,247,251,253,254,  3,  5,  6,  9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96,127,129,130,132,136,144,160,191,192,223,239,247,251,253,254,  3,  5,  6,  9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96,127,129,130,132,136,144,160,191,192,223,239,247,251,253,254,  3,  5,  6,  9},  //  5
		       			 { 15, 23, 27, 29, 30, 39, 43, 45, 46, 51, 53, 54, 57, 58, 60, 71, 75, 77, 78, 83, 85, 86, 89, 90, 92, 99,101,102,105,106,108,113,114,116,120,135,139,141,142,147,149,150,153,154,156,163,165,166,169,170,172,177,178,180,184,195,197,198,201,202,204,209,210,212,216,225,226,228,232,240, 15, 23, 27, 29, 30, 39, 43, 45, 46, 51, 53, 54, 57, 58, 60, 71, 75, 77, 78, 83, 85, 86, 89, 90, 92, 99,101,102,105,106,108,113,114,116,120,135,139,141,142,147,149,150,153,154,156,163,165,166,169,170,172,177,178,180,184,195,197,198,201,202,204,209,210,212,216,225,226,228,232,240, 15, 23, 27, 29, 30, 39, 43, 45, 46, 51, 53, 54, 57, 58, 60, 71, 75, 77, 78, 83, 85, 86, 89, 90, 92, 99,101,102,105,106,108,113,114,116,120,135,139,141,142,147,149,150,153,154,156,163,165,166,169,170,172,177,178,180,184,195,197,198,201,202,204,209,210,212,216,225,226,228,232,240, 15, 23, 27, 29, 30, 39, 43, 45, 46, 51, 53, 54, 57, 58, 60, 71, 75, 77, 78, 83, 85, 86, 89, 90, 92, 99,101,102,105,106,108,113,114,116,120,135,139,141,142,147,149,150,153,154,156,163},  //  6
		       			 { 63, 95,111,119,123,125,126,159,175,183,187,189,190,207,215,219,221,222,231,235,237,238,243,245,246,249,250,252, 63, 95,111,119,123,125,126,159,175,183,187,189,190,207,215,219,221,222,231,235,237,238,243,245,246,249,250,252, 63, 95,111,119,123,125,126,159,175,183,187,189,190,207,215,219,221,222,231,235,237,238,243,245,246,249,250,252, 63, 95,111,119,123,125,126,159,175,183,187,189,190,207,215,219,221,222,231,235,237,238,243,245,246,249,250,252, 63, 95,111,119,123,125,126,159,175,183,187,189,190,207,215,219,221,222,231,235,237,238,243,245,246,249,250,252, 63, 95,111,119,123,125,126,159,175,183,187,189,190,207,215,219,221,222,231,235,237,238,243,245,246,249,250,252, 63, 95,111,119,123,125,126,159,175,183,187,189,190,207,215,219,221,222,231,235,237,238,243,245,246,249,250,252, 63, 95,111,119,123,125,126,159,175,183,187,189,190,207,215,219,221,222,231,235,237,238,243,245,246,249,250,252, 63, 95,111,119,123,125,126,159,175,183,187,189,190,207,215,219,221,222,231,235,237,238,243,245,246,249,250,252, 63, 95,111,119},  //  7
		       			 {},  //  8
		       			 {  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128,  1,  2,  4,  8, 16, 32, 64,128},  //  9
		       			 {  3,  5,  6,  9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96,129,130,132,136,144,160,192,  3,  5,  6,  9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96,129,130,132,136,144,160,192,  3,  5,  6,  9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96,129,130,132,136,144,160,192,  3,  5,  6,  9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96,129,130,132,136,144,160,192,  3,  5,  6,  9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96,129,130,132,136,144,160,192,  3,  5,  6,  9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96,129,130,132,136,144,160,192,  3,  5,  6,  9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96,129,130,132,136,144,160,192,  3,  5,  6,  9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96,129,130,132,136,144,160,192,  3,  5,  6,  9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96,129,130,132,136,144,160,192,  3,  5,  6,  9},  // 10
		       			 {  7, 11, 13, 14, 19, 21, 22, 25, 26, 28, 35, 37, 38, 41, 42, 44, 49, 50, 52, 56, 67, 69, 70, 73, 74, 76, 81, 82, 84, 88, 97, 98,100,104,112,131,133,134,137,138,140,145,146,148,152,161,162,164,168,176,193,194,196,200,208,224,  7, 11, 13, 14, 19, 21, 22, 25, 26, 28, 35, 37, 38, 41, 42, 44, 49, 50, 52, 56, 67, 69, 70, 73, 74, 76, 81, 82, 84, 88, 97, 98,100,104,112,131,133,134,137,138,140,145,146,148,152,161,162,164,168,176,193,194,196,200,208,224,  7, 11, 13, 14, 19, 21, 22, 25, 26, 28, 35, 37, 38, 41, 42, 44, 49, 50, 52, 56, 67, 69, 70, 73, 74, 76, 81, 82, 84, 88, 97, 98,100,104,112,131,133,134,137,138,140,145,146,148,152,161,162,164,168,176,193,194,196,200,208,224,  7, 11, 13, 14, 19, 21, 22, 25, 26, 28, 35, 37, 38, 41, 42, 44, 49, 50, 52, 56, 67, 69, 70, 73, 74, 76, 81, 82, 84, 88, 97, 98,100,104,112,131,133,134,137,138,140,145,146,148,152,161,162,164,168,176,193,194,196,200,208,224,  7, 11, 13, 14, 19, 21, 22, 25, 26, 28, 35, 37, 38, 41, 42, 44, 49, 50, 52, 56, 67, 69, 70, 73, 74, 76, 81, 82, 84, 88, 97, 98},  // 11
		       			 { 15, 23, 27, 29, 30, 39, 43, 45, 46, 51, 53, 54, 57, 58, 60, 71, 75, 77, 78, 83, 85, 86, 89, 90, 92, 99,101,102,105,106,108,113,114,116,120,135,139,141,142,147,149,150,153,154,156,163,165,166,169,170,172,177,178,180,184,195,197,198,201,202,204,209,210,212,216,225,226,228,232,240, 15, 23, 27, 29, 30, 39, 43, 45, 46, 51, 53, 54, 57, 58, 60, 71, 75, 77, 78, 83, 85, 86, 89, 90, 92, 99,101,102,105,106,108,113,114,116,120,135,139,141,142,147,149,150,153,154,156,163,165,166,169,170,172,177,178,180,184,195,197,198,201,202,204,209,210,212,216,225,226,228,232,240, 15, 23, 27, 29, 30, 39, 43, 45, 46, 51, 53, 54, 57, 58, 60, 71, 75, 77, 78, 83, 85, 86, 89, 90, 92, 99,101,102,105,106,108,113,114,116,120,135,139,141,142,147,149,150,153,154,156,163,165,166,169,170,172,177,178,180,184,195,197,198,201,202,204,209,210,212,216,225,226,228,232,240, 15, 23, 27, 29, 30, 39, 43, 45, 46, 51, 53, 54, 57, 58, 60, 71, 75, 77, 78, 83, 85, 86, 89, 90, 92, 99,101,102,105,106,108,113,114,116,120,135,139,141,142,147,149,150,153,154,156,163},  // 12
		       			 { 31, 47, 55, 59, 61, 62, 79, 87, 91, 93, 94,103,107,109,110,115,117,118,121,122,124,143,151,155,157,158,167,171,173,174,179,181,182,185,186,188,199,203,205,206,211,213,214,217,218,220,227,229,230,233,234,236,241,242,244,248, 31, 47, 55, 59, 61, 62, 79, 87, 91, 93, 94,103,107,109,110,115,117,118,121,122,124,143,151,155,157,158,167,171,173,174,179,181,182,185,186,188,199,203,205,206,211,213,214,217,218,220,227,229,230,233,234,236,241,242,244,248, 31, 47, 55, 59, 61, 62, 79, 87, 91, 93, 94,103,107,109,110,115,117,118,121,122,124,143,151,155,157,158,167,171,173,174,179,181,182,185,186,188,199,203,205,206,211,213,214,217,218,220,227,229,230,233,234,236,241,242,244,248, 31, 47, 55, 59, 61, 62, 79, 87, 91, 93, 94,103,107,109,110,115,117,118,121,122,124,143,151,155,157,158,167,171,173,174,179,181,182,185,186,188,199,203,205,206,211,213,214,217,218,220,227,229,230,233,234,236,241,242,244,248, 31, 47, 55, 59, 61, 62, 79, 87, 91, 93, 94,103,107,109,110,115,117,118,121,122,124,143,151,155,157,158,167,171,173,174,179,181},  // 13
		       			 { 63, 95,111,119,123,125,126,159,175,183,187,189,190,207,215,219,221,222,231,235,237,238,243,245,246,249,250,252, 63, 95,111,119,123,125,126,159,175,183,187,189,190,207,215,219,221,222,231,235,237,238,243,245,246,249,250,252, 63, 95,111,119,123,125,126,159,175,183,187,189,190,207,215,219,221,222,231,235,237,238,243,245,246,249,250,252, 63, 95,111,119,123,125,126,159,175,183,187,189,190,207,215,219,221,222,231,235,237,238,243,245,246,249,250,252, 63, 95,111,119,123,125,126,159,175,183,187,189,190,207,215,219,221,222,231,235,237,238,243,245,246,249,250,252, 63, 95,111,119,123,125,126,159,175,183,187,189,190,207,215,219,221,222,231,235,237,238,243,245,246,249,250,252, 63, 95,111,119,123,125,126,159,175,183,187,189,190,207,215,219,221,222,231,235,237,238,243,245,246,249,250,252, 63, 95,111,119,123,125,126,159,175,183,187,189,190,207,215,219,221,222,231,235,237,238,243,245,246,249,250,252, 63, 95,111,119,123,125,126,159,175,183,187,189,190,207,215,219,221,222,231,235,237,238,243,245,246,249,250,252, 63, 95,111,119},  // 14
		       			 {127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254,127,191,223,239,247,251,253,254},  // 15
		       			 {}}; // 16

int matrpaus[16][8]  = {{4,2,3,4,5,6,7,8},{3,4,3,4,5,6,7,8},{4,2,5,4,5,6,7,8},{3,5,3,6,5,6,7,8},{3,2,3,4,4,6,7,8},{4,5,7,4,5,8,7,8},{3,2,3,4,5,6,4,8},{3,5,3,6,5,6,7,7},{4,2,5,4,5,6,7,8},{3,4,3,4,6,6,7,8},{4,2,3,4,5,6,7,8},{5,6,7,8,5,6,7,8},{4,2,3,4,5,6,7,8},{3,4,3,4,5,6,5,8},{4,2,6,4,7,6,7,8},{3,5,3,6,5,6,7,7}};

struct strucomp { int ntime; int var[KC][2]; } comp;

//        var[i][0]
//        0 обычная вставка мелодии или темы
//        1 с паузами
//        2 со сдвигом
//        3 обратка

struct strucomp matrcomp[FC] = {{2,{{ 0, 0},{ 0, 1},{ 0, 0},{ 0, 0},{ 0, 0},{0, 0},{ 0, 0},{ 0, 0}}},  //  0
								{4,{{ 0, 1},{ 0, 1},{ 0, 1},{ 0, 1},{ 0, 0},{0, 0},{ 0, 0},{ 0, 0}}},  //  1
								{4,{{ 0, 1},{ 1, 2},{ 0, 1},{ 1, 2},{ 0, 0},{0, 0},{ 0, 0},{ 0, 0}}},  //  2
								{4,{{ 0, 0},{ 0, 1},{ 0, 1},{ 0, 1},{ 0, 0},{0, 0},{ 0, 0},{ 0, 0}}},  //  3
								{4,{{ 0, 1},{ 0, 1},{ 0, 1},{ 0, 1},{ 0, 0},{0, 0},{ 0, 0},{ 0, 0}}},  //  4
								{4,{{ 0, 0},{ 1, 2},{ 1, 1},{ 0, 1},{ 0, 0},{0, 0},{ 0, 0},{ 0, 0}}},  //  5
								{4,{{ 0, 1},{ 1, 2},{ 1, 1},{ 0, 1},{ 0, 0},{0, 0},{ 0, 0},{ 0, 0}}},  //  6
								{5,{{ 0, 1},{ 1, 2},{ 0, 1},{ 1, 1},{ 0, 1},{0, 0},{ 0, 0},{ 0, 0}}},  //  7
								{5,{{ 0, 0},{ 0, 1},{ 1, 1},{ 1, 2},{ 0, 1},{0, 0},{ 0, 0},{ 0, 0}}},  //  8
								{5,{{ 0, 0},{ 0, 1},{ 2, 2},{ 1, 2},{ 0, 0},{0, 0},{ 0, 0},{ 0, 0}}},  //  9
								{8,{{ 0, 0},{ 3, 0},{ 0, 1},{ 3, 0},{ 1, 2},{0, 1},{ 3, 1},{ 0, 0}}}}; // 10

struct strugrin { string name; int nbegin; int ntime; };
struct strugrin grin[16] = {{"Piano",0,8},{"Chromatic Percussion",8,8},{"Organ",16,8},{"Guitar",24,8},{"Bass",32,8},{"Strings",40,8},{"Strings (continued)",48,8},{"Brass",56,8},{"Reed",64,8},{"Pipe",72,8},{"Synth Lead",80,8},{"Synth Pad",88,8},{"Synth Effects",96,8},{"Ethnic",104,8},{"Percussive",112,7},{"Sound effects",119,9}};
struct struinst { string nameins; string namegrp; };
struct struinst soin[128] = {{"Acoustic Grand Piano"   ,"Piano"               },{"Bright Acoustic Piano"  ,"Piano"               },{"Electric Grand Piano"   ,"Piano"               },{"Honky-tonk Piano"       ,"Piano"               },
							 {"Electric Piano 1"       ,"Piano"               },{"Electric Piano 2"       ,"Piano"               },{"Harpsichord"            ,"Piano"               },{"Clavinet"               ,"Piano"               },
							 {"Celesta"                ,"Chromatic Percussion"},{"Glockenspiel"           ,"Chromatic Percussion"},{"Music Box"              ,"Chromatic Percussion"},{"Vibraphone"             ,"Chromatic Percussion"},
							 {"Marimba"                ,"Chromatic Percussion"},{"Xylophone"              ,"Chromatic Percussion"},{"Tubular Bells"          ,"Chromatic Percussion"},{"Dulcimer"               ,"Chromatic Percussion"},
							 {"Drawbar Organ"          ,"Organ"               },{"Percussive Organ"       ,"Organ"               },{"Rock Organ"             ,"Organ"               },{"Church Organ"           ,"Organ"               },
							 {"Reed Organ"             ,"Organ"               },{"Accordion"              ,"Organ"               },{"Harmonica"              ,"Organ"               },{"Tango Accordion"        ,"Organ"               },
							 {"Acoustic Guitar (nylon)","Guitar"              },{"Acoustic Guitar (steel)","Guitar"              },{"Electric Guitar (jazz)" ,"Guitar"              },{"Electric Guitar (clean)","Guitar"              },
							 {"Electric Guitar (muted)","Guitar"              },{"Overdriven Guitar"      ,"Guitar"              },{"Distortion Guitar"      ,"Guitar"              },{"Guitar harmonics"       ,"Guitar"              },
							 {"Acoustic Bass"          ,"Bass"                },{"Electric Bass (finger)" ,"Bass"                },{"Electric Bass (pick)"   ,"Bass"                },{"Fretless Bass"          ,"Bass"                },
							 {"Slap Bass 1"            ,"Bass"                },{"Slap Bass 2"            ,"Bass"                },{"Synth Bass 1"           ,"Bass"                },{"Synth Bass 2"           ,"Bass"                },
							 {"Violin"                 ,"Strings"             },{"Viola"                  ,"Strings"             },{"Cello"                  ,"Strings"             },{"Contrabass"             ,"Strings"             },
							 {"Tremolo Strings"        ,"Strings"             },{"Pizzicato Strings"      ,"Strings"             },{"Orchestral Harp"        ,"Strings"             },{"Timpani"                ,"Strings"             },
							 {"String Ensemble 1"      ,"Strings (continued)" },{"String Ensemble 2"      ,"Strings (continued)" },{"Synth Strings 1"        ,"Strings (continued)" },{"Synth Strings 2"        ,"Strings (continued)" },
							 {"Choir Aahs"             ,"Strings (continued)" },{"Voice Oohs"             ,"Strings (continued)" },{"Synth Voice"            ,"Strings (continued)" },{"Orchestra Hit"          ,"Strings (continued)" },
							 {"Trumpet"                ,"Brass"               },{"Trombone"               ,"Brass"               },{"Tuba"                   ,"Brass"               },{"Muted Trumpet"          ,"Brass"               },
							 {"French Horn"            ,"Brass"               },{"Brass Section"          ,"Brass"               },{"Synth Brass 1"          ,"Brass"               },{"Synth Brass 2"          ,"Brass"               },
							 {"Soprano Sax"            ,"Reed"                },{"Alto Sax"               ,"Reed"                },{"Tenor Sax"              ,"Reed"                },{"Baritone Sax"           ,"Reed"                },
							 {"Oboe"                   ,"Reed"                },{"English Horn"           ,"Reed"                },{"Bassoon"                ,"Reed"                },{"Clarinet"               ,"Reed"                },
							 {"Piccolo"                ,"Pipe"                },{"Flute"                  ,"Pipe"                },{"Recorder"               ,"Pipe"                },{"Pan Flute"              ,"Pipe"                },
							 {"Blown Bottle"           ,"Pipe"                },{"Shakuhachi"             ,"Pipe"                },{"Whistle"                ,"Pipe"                },{"Ocarina"                ,"Pipe"                },
							 {"Lead 1 (square)"        ,"Synth Lead"          },{"Lead 2 (sawtooth)"      ,"Synth Lead"          },{"Lead 3 (calliope)"      ,"Synth Lead"          },{"Lead 4 (chiff)"         ,"Synth Lead"          },
							 {"Lead 5 (charang)"       ,"Synth Lead"          },{"Lead 6 (voice)"         ,"Synth Lead"          },{"Lead 7 (fifths)"        ,"Synth Lead"          },{"Lead 8 (bass + lead)"   ,"Synth Lead"          },
							 {"Pad 1 (new age)"        ,"Synth Pad"           },{"Pad 2 (warm)"           ,"Synth Pad"           },{"Pad 3 (polysynth)"      ,"Synth Pad"           },{"Pad 4 (choir)"          ,"Synth Pad"           },
							 {"Pad 5 (bowed)"          ,"Synth Pad"           },{"Pad 6 (metallic)"       ,"Synth Pad"           },{"Pad 7 (halo)"           ,"Synth Pad"           },{"Pad 8 (sweep)"          ,"Synth Pad"           },
							 {"FX 1 (rain)"            ,"Synth Effects"       },{"FX 2 (soundtrack)"      ,"Synth Effects"       },{"FX 3 (crystal)"         ,"Synth Effects"       },{"FX 4 (atmosphere)"      ,"Synth Effects"       },
							 {"FX 5 (brightness)"      ,"Synth Effects"       },{"FX 6 (goblins)"         ,"Synth Effects"       },{"FX 7 (echoes)"          ,"Synth Effects"       },{"FX 8 (sci-fi)"          ,"Synth Effects"       },
							 {"Sitar"                  ,"Ethnic"              },{"Banjo"                  ,"Ethnic"              },{"Shamisen"               ,"Ethnic"              },{"Koto"                   ,"Ethnic"              },
							 {"Kalimba"                ,"Ethnic"              },{"Bag pipe"               ,"Ethnic"              },{"Fiddle"                 ,"Ethnic"              },{"Shanai"                 ,"Ethnic"              },
							 {"Tinkle Bell"            ,"Percussive"          },{"Agogo"                  ,"Percussive"          },{"Steel Drums"            ,"Percussive"          },{"Woodblock"              ,"Percussive"          },
							 {"Taiko Drum"             ,"Percussive"          },{"Melodic Tom"            ,"Percussive"          },{"Synth Drum"             ,"Percussive"          },{"Reverse Cymbal"         ,"Sound effects"       },
							 {"Guitar Fret Noise"      ,"Sound effects"       },{"Breath Noise"           ,"Sound effects"       },{"Seashore"               ,"Sound effects"       },{"Bird Tweet"             ,"Sound effects"       },
							 {"Telephone Ring"         ,"Sound effects"       },{"Helicopter"             ,"Sound effects"       },{"Applause"               ,"Sound effects"       },{"Gunshot"                ,"Sound effects"       }};
int matrton[7][5]={{2,28,35, 0, 0},{2,29,36, 0, 0},{2,30,37, 0, 0},{2,31,38, 0, 0},{3,25,32,39, 0},{2,26,33, 0, 0},{2,27,34, 0, 0}};
int matrstot[7][4]={{0,5,3,1},{1,6,4,2},{2,0,5,3},{3,1,6,4},{4,2,0,5},{5,3,1,6},{6,4,2,0}};
// int matrotst[7][4]={{0,2,4,6},{1,3,5,0},{2,4,6,1},{3,5,0,2},{4,6,1,3},{5,0,2,4},{6,1,3,5}};

int matrvl1[3]={126,110,114};
int matrvl2[3]={215,224,221};
//==============================================================================================================================================================================================================================================================================
struct strumusic { int tact; int fishka; int qfish; int nfish; bool liga; int step; int nn; char note; char sign; int octave; int duration; int time; int voice; int dot; int stem; int staff; int beam1; int beam2; int accent; int tie; int func; char sa[3]; } melody[NC], podgol[NC], temp0[NC], temamel[NC], temapod[NC], chord[EC], garm[EC], bass[EC], track1[EC], track2[EC], track3[EC], track4[EC];
//==============================================================================================================================================================================================================================================================================
int cno = 0, noteu[27], ritm1[8], ritm2[8], ritm3, ritm4, instrum[4], vol[4], napr;  // count tact, count note at lad, array steady note, direction
int cus = 0, kmin, kmax, ds, dc;       // count steady notes at range, minimum culmination, maximum culmination
int kc, tc, tt, pa, vt, vl, imt, im, ip, ipt, ig, ic, ib, ipp, func, pfunc; // tonality, posl akkords, point melody, point garmony, point chord, point pause, function, prefunction, number instrument
int st, sm, s3, ss, sd, s6, s7;
bool snk = false;
//========================================================================================================================================================================================================================================================================
int  funlog2(int x) { int y = 0; while (x%2 == 0) { x = x/2; y++; } return y; }
int  funind(int u) { int x; for(x = 0; x < cus; x++ ) { if(u == noteu[x]) return x; } return -1; }
char funnote(int x) { char y; if ( x == 0) y = 'C'; if ( x == 1) y = 'D'; if ( x == 2) y = 'E'; if ( x == 3) y = 'F'; if ( x == 4) y = 'G'; if ( x == 5) y = 'A'; if ( x == 6) y = 'B'; return y; }
void funnapr(int x, int y, char s) { int ddd; ddd = y - x; if (ddd != 0) { if (napr < 0) napr = (ddd > 0 ?  1 : napr-1); else if (napr > 0) napr = (ddd < 0 ? -1 : napr+1); else napr = (ddd > 0 ? 1 : -1); }  /* cout << s << "  x= " << x << " y= " << y << " ddd= " << ddd << " napr= " << napr << endl; */ }
char funalt(char sign, char csign) { if (csign == '#') { sign = ((sign == 'p') ? 'b' : ((sign == 'b') ? ' ' : ((sign == ' ') ? '#' : 'x'))); } if (csign == 'b') { sign = ((sign == 'x') ? '#' : ((sign == '#') ? ' ' : ((sign == ' ') ? 'b' : 'p'))); } return sign; }
int  fungrokt(char note, char sign, int okt) { if(note == 'C' && (sign == 'b' || sign == 'p')) okt++; if(note == 'B' && (sign == '#' || sign == 'x')) okt--; return okt; }

void funcvar0_01(int fm, int fp)
{
	int i, j, k, l, pp, n, m, m1, nf1, fish1[4][5];
	bool fl = false;
	pp = ( fm > 0 ? matrpaus[ritmris1.ntime-1][fm-1] : 1 );
	i = 0;
	while ( i < imt ) {
		nf1 = temp0[i].nfish; m1 = temp0[i].fishka; m = m1%10; n = m1/10;

		if ( fm > 0 ) { k = domino[m].ntime-1; fl = ( ( (nf1%16)%pp == 0 ) && (temp0[i].tact != tc) ); }
		else { if ( snk ) k = 1+rand()%(domino[m].ntime-1); else { if ( m != 7 ) k = 1+rand()%((domino[m].ntime/2)-1); else k = 1; } fl = ( (rand()%fp == 0) && (temp0[i].tact != tc) ); }

		for (j = 0; j < 4; j++) { for (l = 0; l < 5; l++) { fish1[j][l] = domino[m].fish[n][k][j][l]; } }
		while ( ( i < imt ) && ( nf1 == temp0[i].nfish ) )
		{
			for (j = 0; j < 4; j++)
			{
				if( fish1[j][1] != 0 )
				{
					if ( fl && (fish1[j][0] == 3) )
					{
						temp0[i].step = -1; ipp++; temp0[i].beam1 = 0; temp0[i].beam2 = 0; temp0[i].accent = 0;
						if (temp0[i].liga) { temp0[i].liga = false; temp0[i].tie = 0; if (i > 0) temp0[i-1].tie = 0; }
					}
					else
					{
						if ( j == 0 )
						{
							if ( ( i > 0 ) && ( temp0[i].liga ) && ( temp0[i-1].step == -1 ) ) { temp0[i].liga = false; temp0[i].tie = 0; temp0[i-1].tie = 0; }
						}
					}
					i++;
				}
			}
		}
	}
} 

void funcvar1_01() { }
void funcvar2_01() { }

void fungarm(int i, int fun, int vn, int ot, int ta)
{
	int j, k, glub; glub = (pfunc == -1 ? 0 : rand()%2);
	ta = (ta == 7 ? 40 : (rand()%4 == 0 ? 30 : 30));    // *CH*
	k = (ta == 30 ? 3 : 4);
	for (j = 0; j < k; j++)
	{
		garm[ig+j].tact = chord[i].tact;
		garm[ig+j].fishka = chord[i].fishka;
		garm[ig+j].qfish = chord[i].qfish;
		garm[ig+j].nfish = chord[i].nfish;
		garm[ig+j].liga = chord[i].liga;
		if(ta == 30) garm[ig+j].step =  GRM*cno+a30[(ton.stp[0]+fun)%cno][glub][j];
		if(ta == 31) garm[ig+j].step =  GRM*cno+a31[(ton.stp[0]+fun)%cno][glub][j];
		if(ta == 40) garm[ig+j].step =  GRM*cno+a40[(ton.stp[0]+fun)%cno][glub][j];
		garm[ig+j].nn = notet[garm[ig+j].step].nn;
		garm[ig+j].note = notet[garm[ig+j].step].c1n;
		garm[ig+j].sign = notet[garm[ig+j].step].a1n;
		garm[ig+j].octave =  fungrokt(garm[ig+j].note, garm[ig+j].sign, garm[ig+j].nn/12);
		garm[ig+j].duration = chord[i].duration;
		garm[ig+j].time = chord[i].time;
		garm[ig+j].voice = chord[i].voice;
		garm[ig+j].dot = chord[i].dot;
		garm[ig+j].stem = chord[i].stem;
		garm[ig+j].staff = chord[i].staff;
		garm[ig+j].beam1 = chord[i].beam1;
		garm[ig+j].beam2 = chord[i].beam2;
		garm[ig+j].accent = chord[i].accent;
		garm[ig+j].tie = chord[i].tie;
		garm[ig+j].func = (j == 0 ? fun : -2 );
		if (j == 0)
		{
			if ((ton.sa[fun][0] == '1') && (ton.sa[fun][1] == '0')) { garm[ig].sa[0] = ' '; if ( (ta == 40) && (ton.sa[fun][2] == '1') ) { garm[ig].sa[0] = 'M'; } }
			if ((ton.sa[fun][0] == '0') && (ton.sa[fun][1] == '1')) { garm[ig].sa[0] = 'm'; }
			if ((ton.sa[fun][0] == '0') && (ton.sa[fun][1] == '0')) { garm[ig].sa[0] = '0'; }
			if ((ton.sa[fun][0] == '1') && (ton.sa[fun][1] == '1')) { garm[ig].sa[0] = '+'; }
			garm[ig].sa[1] = (ta == 40 ? '7' : '5');
		}
		if ( (ton.lad == "minor") && ( vn == 2 ) && ( ot == 6 ) ) // # 7
		{
			if (j == 0) { if ( (garm[ig  ].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig  ].sa[2] = '#'; garm[ig  ].sign = funalt(garm[ig  ].sign, '#'); garm[ig  ].nn = garm[ig  ].nn+1; garm[ig  ].octave = fungrokt(garm[ig  ].note, garm[ig  ].sign, garm[ig  ].nn/12); garm[ig].sa[0] = '0'; } }
			if (j == 1) { if ( (garm[ig+1].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig+1].sa[2] = '#'; garm[ig+1].sign = funalt(garm[ig+1].sign, '#'); garm[ig+1].nn = garm[ig+1].nn+1; garm[ig+1].octave = fungrokt(garm[ig+1].note, garm[ig+1].sign, garm[ig+1].nn/12); garm[ig].sa[0] = ' '; } }
			if (j == 2) { if ( (garm[ig+2].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig+2].sa[2] = '#'; garm[ig+2].sign = funalt(garm[ig+2].sign, '#'); garm[ig+2].nn = garm[ig+2].nn+1; garm[ig+2].octave = fungrokt(garm[ig+2].note, garm[ig+2].sign, garm[ig+2].nn/12); garm[ig].sa[0] = '+'; } }
			if (j == 3) { if ( (garm[ig+3].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig+3].sa[2] = '#'; garm[ig+3].sign = funalt(garm[ig+3].sign, '#'); garm[ig+3].nn = garm[ig+3].nn+1; garm[ig+3].octave = fungrokt(garm[ig+3].note, garm[ig+3].sign, garm[ig+3].nn/12); } }
		}
		if ( (ton.lad == "major") && ( vn == 1 ) && ( ot == 5 ) ) // b 6
		{
			if (j == 0) { if ( (garm[ig  ].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig  ].sa[2] = 'b'; garm[ig  ].sign = funalt(garm[ig  ].sign, 'b'); garm[ig  ].nn = garm[ig  ].nn-1; garm[ig  ].octave = fungrokt(garm[ig  ].note, garm[ig  ].sign, garm[ig  ].nn/12); garm[ig].sa[0] = '+'; } }
			if (j == 1) { if ( (garm[ig+1].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig+1].sa[2] = 'b'; garm[ig+1].sign = funalt(garm[ig+1].sign, 'b'); garm[ig+1].nn = garm[ig+1].nn-1; garm[ig+1].octave = fungrokt(garm[ig+1].note, garm[ig+1].sign, garm[ig+1].nn/12); garm[ig].sa[0] = 'm'; } }
			if (j == 2) { if ( (garm[ig+2].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig+2].sa[2] = 'b'; garm[ig+2].sign = funalt(garm[ig+2].sign, 'b'); garm[ig+2].nn = garm[ig+2].nn-1; garm[ig+2].octave = fungrokt(garm[ig+2].note, garm[ig+2].sign, garm[ig+2].nn/12); garm[ig].sa[0] = '0'; } }
			if (j == 3) { if ( (garm[ig+3].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig+3].sa[2] = 'b'; garm[ig+3].sign = funalt(garm[ig+3].sign, 'b'); garm[ig+3].nn = garm[ig+3].nn-1; garm[ig+3].octave = fungrokt(garm[ig+3].note, garm[ig+3].sign, garm[ig+3].nn/12); } }
		}
		if ( (ton.lad == "minor") && ( vn == 1 ) && ( ot == 0 ) ) // b 1
		{
			if (j == 0) { if ( (garm[ig  ].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig  ].sa[2] = 'b'; garm[ig  ].sign = funalt(garm[ig  ].sign, 'b'); garm[ig  ].nn = garm[ig  ].nn-1; garm[ig  ].octave = fungrokt(garm[ig  ].note, garm[ig  ].sign, garm[ig  ].nn/12); garm[ig].sa[0] = '+'; } }
			if (j == 1) { if ( (garm[ig+1].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig+1].sa[2] = 'b'; garm[ig+1].sign = funalt(garm[ig+1].sign, 'b'); garm[ig+1].nn = garm[ig+1].nn-1; garm[ig+1].octave = fungrokt(garm[ig+1].note, garm[ig+1].sign, garm[ig+1].nn/12); garm[ig].sa[0] = 'm'; } }
			if (j == 2) { if ( (garm[ig+2].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig+2].sa[2] = 'b'; garm[ig+2].sign = funalt(garm[ig+2].sign, 'b'); garm[ig+2].nn = garm[ig+2].nn-1; garm[ig+2].octave = fungrokt(garm[ig+2].note, garm[ig+2].sign, garm[ig+2].nn/12); garm[ig].sa[0] = '0'; } }
			if (j == 3) { if ( (garm[ig+3].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig+3].sa[2] = 'b'; garm[ig+3].sign = funalt(garm[ig+3].sign, 'b'); garm[ig+3].nn = garm[ig+3].nn-1; garm[ig+3].octave = fungrokt(garm[ig+3].note, garm[ig+3].sign, garm[ig+3].nn/12); } }
		}
		if ( (ton.lad == "major") && ( vn == 2 ) && ( ot == 4 ) ) // # 5
		{
			if (j == 0) { if ( (garm[ig  ].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig  ].sa[2] = '#'; garm[ig  ].sign = funalt(garm[ig  ].sign, '#'); garm[ig  ].nn = garm[ig  ].nn+1; garm[ig  ].octave = fungrokt(garm[ig  ].note, garm[ig  ].sign, garm[ig  ].nn/12); garm[ig].sa[0] = '0'; } }
			if (j == 1) { if ( (garm[ig+1].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig+1].sa[2] = '#'; garm[ig+1].sign = funalt(garm[ig+1].sign, '#'); garm[ig+1].nn = garm[ig+1].nn+1; garm[ig+1].octave = fungrokt(garm[ig+1].note, garm[ig+1].sign, garm[ig+1].nn/12); garm[ig].sa[0] = ' '; } }
			if (j == 2) { if ( (garm[ig+2].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig+2].sa[2] = '#'; garm[ig+2].sign = funalt(garm[ig+2].sign, '#'); garm[ig+2].nn = garm[ig+2].nn+1; garm[ig+2].octave = fungrokt(garm[ig+2].note, garm[ig+2].sign, garm[ig+2].nn/12); garm[ig].sa[0] = '+'; } }
			if (j == 3) { if ( (garm[ig+3].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig+3].sa[2] = '#'; garm[ig+3].sign = funalt(garm[ig+3].sign, '#'); garm[ig+3].nn = garm[ig+3].nn+1; garm[ig+3].octave = fungrokt(garm[ig+3].note, garm[ig+3].sign, garm[ig+3].nn/12); } }
		}
		if ( (ton.lad == "minor") && ( vn == 1 ) && ( ot == 4 ) ) // b 5
		{
			if (j == 0) { if ( (garm[ig  ].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig  ].sa[2] = 'b'; garm[ig  ].sign = funalt(garm[ig  ].sign, 'b'); garm[ig  ].nn = garm[ig  ].nn-1; garm[ig  ].octave = fungrokt(garm[ig  ].note, garm[ig  ].sign, garm[ig  ].nn/12); garm[ig].sa[0] = '+'; } }
			if (j == 1) { if ( (garm[ig+1].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig+1].sa[2] = 'b'; garm[ig+1].sign = funalt(garm[ig+1].sign, 'b'); garm[ig+1].nn = garm[ig+1].nn-1; garm[ig+1].octave = fungrokt(garm[ig+1].note, garm[ig+1].sign, garm[ig+1].nn/12); garm[ig].sa[0] = 'm'; } }
			if (j == 2) { if ( (garm[ig+2].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig+2].sa[2] = 'b'; garm[ig+2].sign = funalt(garm[ig+2].sign, 'b'); garm[ig+2].nn = garm[ig+2].nn-1; garm[ig+2].octave = fungrokt(garm[ig+2].note, garm[ig+2].sign, garm[ig+2].nn/12); garm[ig].sa[0] = '0'; } }
			if (j == 3) { if ( (garm[ig+3].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig+3].sa[2] = 'b'; garm[ig+3].sign = funalt(garm[ig+3].sign, 'b'); garm[ig+3].nn = garm[ig+3].nn-1; garm[ig+3].octave = fungrokt(garm[ig+3].note, garm[ig+3].sign, garm[ig+3].nn/12); } }
		}
		if ( (ton.lad == "major") && ( vn == 2 ) && ( ot == 1 ) ) // # 2
		{
			if (j == 0) { if ( (garm[ig  ].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig  ].sa[2] = '#'; garm[ig  ].sign = funalt(garm[ig  ].sign, '#'); garm[ig  ].nn = garm[ig  ].nn+1; garm[ig  ].octave = fungrokt(garm[ig  ].note, garm[ig  ].sign, garm[ig  ].nn/12); garm[ig].sa[0] = 'm'; } }
			if (j == 1) { if ( (garm[ig+1].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig+1].sa[2] = '#'; garm[ig+1].sign = funalt(garm[ig+1].sign, '#'); garm[ig+1].nn = garm[ig+1].nn+1; garm[ig+1].octave = fungrokt(garm[ig+1].note, garm[ig+1].sign, garm[ig+1].nn/12); garm[ig].sa[0] = ' '; } }
			if (j == 2) { if ( (garm[ig+2].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig+2].sa[2] = '#'; garm[ig+2].sign = funalt(garm[ig+2].sign, '#'); garm[ig+2].nn = garm[ig+2].nn+1; garm[ig+2].octave = fungrokt(garm[ig+2].note, garm[ig+2].sign, garm[ig+2].nn/12); garm[ig].sa[0] = '+'; } }
			if (j == 3) { if ( (garm[ig+3].step)%cno == (ton.stp[0]+ot)%cno ) { garm[ig+3].sa[2] = '#'; garm[ig+3].sign = funalt(garm[ig+3].sign, '#'); garm[ig+3].nn = garm[ig+3].nn+1; garm[ig+3].octave = fungrokt(garm[ig+3].note, garm[ig+3].sign, garm[ig+3].nn/12); } }
		}
	}
	ig = ig+k; func = fun; if (func == 0) st++; if (func == 1) sm++; if (func == 2) s3++; if (func == 3) ss++; if (func == 4) sd++; if (func == 5) s6++; if (func == 6) s7++;
}

bool funstot(int nn, int st, int ot)
{
	int i; bool flag = false; for (i = 0; i < nn; i++) { if (st == matrstot[ot][i]) flag = true; } return flag;
}

int fundiat_uu(int u, bool flpov, int d) {
	int in, dd, o, n, y;
	if (!notet[u].ust) { cout << "u -> u AVARIA ust != ust " << u << endl; y = u; return y; }

	in = funind(u); o = u/cno; n = u%cno;

	if (in == -1) { cout << "u -> u AVARIA index == -1 " << u << " " << o << " " << n << endl; y = o*cno+ton.stp[rand()%3]; return y; }

	if ( d == 0 ) y = u;
	else
	{
		if (flpov)
		{
			if ( d > 0 )
			{
				dd = cus-1-in;
				if ( dd >= 3 ) y = (rand()%(4*PS) == 0 ? noteu[in] : ( rand()%(2*PS) == 0 ? noteu[in+1] : ( rand()%PS == 0 ? noteu[in+3] : noteu[in+2])));
				else if ( dd == 2 ) y = (rand()%(4*PS) == 0 ? noteu[in] : ( rand()%(2*PS) == 0 ? noteu[in+1] : noteu[in+2]));
				else if ( dd == 1 ) y = (rand()%(4*PS) == 0 ? noteu[in] : noteu[in+1]);
				else y = (rand()%(4*PS) == 0 ? noteu[in] : noteu[in-1]);
			}
			else
			{
				dd = in;
				if ( dd >= 3 ) y = (rand()%(4*PS) == 0 ? noteu[in] : ( rand()%(2*PS) == 0 ? noteu[in-1] : ( rand()%PS == 0 ? noteu[in-3] : noteu[in-2])));
				else if ( dd == 2 ) y = (rand()%(4*PS) == 0 ? noteu[in] : ( rand()%(2*PS) == 0 ? noteu[in-1] : noteu[in-2]));
				else if ( dd == 1 ) y = (rand()%(4*PS) == 0 ? noteu[in] : noteu[in-1]); else y = (rand()%(4*PS) == 0 ? noteu[in] : noteu[in+1]);
			}
		}
		else
		{
			if ( d > 0 )
			{
				dd = cus-1-in;
				if ( dd >= 3 ) y = (rand()%(4*PS) == 0 ? noteu[in+1] : ( rand()%(2*PS) == 0 ? noteu[in+3] : noteu[in+2]));
				else if ( dd == 2 ) y = (rand()%(4*PS) == 0 ? noteu[in+1] : noteu[in+2]);
				else if ( dd == 1 ) y = noteu[in+1]; else y = noteu[in-1];
			}
			else
			{
				dd = in;
				if ( dd >= 3 ) y = (rand()%(4*PS) == 0 ? noteu[in-1] : ( rand()%(2*PS) == 0 ? noteu[in-3] : noteu[in-2]));
				else if ( dd == 2 ) y = (rand()%(4*PS) == 0 ? noteu[in-1] : noteu[in-2]);
				else if ( dd == 1 ) y = noteu[in-1]; else y = noteu[in+1];
			}
		}
	}
	funnapr(u, y, 'S');
	return y;
}

int fundiat_up(int u) { int um, up, y; if (!notet[u].ust) { cout << "AVARIA ust != ust " << u << endl; return u; } um = ( u-1 >= kmin ? u-1 : u+1 ); up = ( u+1 <= kmax ? u+1 : u-1 ); if (!notet[um].ust && !notet[up].ust) y = ( napr < 0 ? ((rand()%16 == 0) ? up : um ) : ((rand()%16 == 0) ? um : up )); else if (!notet[um].ust) y = um; else if (!notet[up].ust) y = up; else { cout << "u -> p AVARIA " << u << " " << um << " " << up << endl; y = u; } funnapr(u, y, 'D'); return y; }
int fundiat_pu(int p) { int pm, pp, y; if ( notet[p].ust) { cout << "AVARIA proh != proh " << p << endl; return p; } pm = ( p-1 >= kmin ? p-1 : p+1 ); pp = ( p+1 <= kmax ? p+1 : p-1 ); if (notet[pm].ust && notet[pp].ust) y = ( napr < 0 ? ((rand()%16 == 0) ? pp : pm ) : ((rand()%16 == 0) ? pm : pp )); else if (notet[pm].ust) y = pm; else if (notet[pp].ust) y = pp; else { cout << "p -> u AVARIA " << p << " " << pm << " " << pp << endl; y = ( (rand()%2 == 0) ? pm : pp ); } funnapr(p, y, 'D'); return y; }

void funrule1(int ii)
{
	int i;
	temp0[0].step   = matrton[ton.stp[0]][1+(rand()%matrton[ton.stp[0]][0])]; // cno*OKT+ton.stp[0];
	temp0[0].nn     = notet[temp0[0].step].nn;
	temp0[0].note   = notet[temp0[0].step].c1n;
	temp0[0].sign   = notet[temp0[0].step].a1n;
	temp0[0].octave = fungrokt(temp0[0].note, temp0[0].sign, temp0[0].nn/12);

	napr = ( temp0[0].step == noteu[0] ? 1 : ( temp0[0].step == noteu[cus-1] ? -1 : (rand()%2 == 0 ? 1 : -1)) );
	for (i = 0; i < ii-1; i++)
	{
////////////////////////////////////////// sluchaino ///////////////////////////////////////////////
//		temp0[i+1].step = cno*OKT + rand() % cno; // 1
//
//////////////////////////////////////////  Rule Lavrova ////////////////////////////////////////////////
		if ( (i < (ii-2)) && temp0[i+2].liga )
		{
			if (notet[temp0[i].step].ust) temp0[i+1].step = fundiat_uu(temp0[i].step, false, -napr);
			else temp0[i+1].step = fundiat_pu(temp0[i].step);
		}
		else if ( temp0[i+1].liga )
		{
			temp0[i+1].step = temp0[i].step;
			temp0[i].tie    = temp0[i].tie   + 1;
			temp0[i+1].tie  = temp0[i+1].tie + 2;
			funnapr(temp0[i].step, temp0[i+1].step, 'L');
		}
		else
		{
			if ( notet[temp0[i].step].ust )
			{
				if (temp0[i+1].accent == 1)
				{
					if ((i < (ii-2)) && (temp0[i+1].duration > temp0[i+2].duration)) temp0[i+1].step = fundiat_up(temp0[i].step);
					else temp0[i+1].step = fundiat_uu(temp0[i].step, true, -napr);
				}
				else temp0[i+1].step = (rand()%4 == 0 ? fundiat_uu(temp0[i].step, true, -napr) : fundiat_up(temp0[i].step));
			}
			else temp0[i+1].step = fundiat_pu(temp0[i].step);
		}
		temp0[i+1].nn     = notet[temp0[i+1].step].nn;
		temp0[i+1].note   = notet[temp0[i+1].step].c1n;
		temp0[i+1].sign   = notet[temp0[i+1].step].a1n;
		temp0[i+1].octave = fungrokt(temp0[i+1].note, temp0[i+1].sign, temp0[i+1].nn/12);
	}
	temp0[ii-1].step   = matrton[ton.stp[0]][1+(rand()%matrton[ton.stp[0]][0])]; // cno*OKT+ton.stp[0];
	temp0[ii-1].nn     = notet[temp0[ii-1].step].nn;
	temp0[ii-1].note   = notet[temp0[ii-1].step].c1n;
	temp0[ii-1].sign   = notet[temp0[ii-1].step].a1n;
	temp0[ii-1].octave = fungrokt(temp0[ii-1].note, temp0[ii-1].sign, temp0[ii-1].nn/12);
}

// mpr[tc][4][6]
// [tc] - номер такта | [ 4] - номер трека  |  [ 6] - характеристики такта                                
//                             0 - мелодия            0 - количество фишек на такт (1,2,4)                
//                             1 - мелодия            1 - фишка (0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17) 
//                             2 - гармония           2 - фишка (0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17) 
//                             3 - бас                3 - фишка (0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17) 
//                                                    4 - фишка (0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17) 
//                                                    5 - в басу (не изменять)/(изменять) фишку баса (0,1)
//                                                      - в мелодии направление баса (1/-1)               
//                                                    

int main()
{
//                  	 0,  7,  13, 5,  2,  9,  4,  12, 16, 15, 11, 6
//	                    |C  |G  |Eb |F  |D  |A  |E  |Db |Bb |Ab |B  |F# |
	int luba_maj[12] = { 0,  7,  13, 5,  2,  9,  4,  12, 16, 15, 11, 6 };
	int luba_min[12] = { 26, 21, 17, 19, 28, 23, 18, 27, 24, 22, 25, 20};
//	                    |Am |Em |Cm |Dm |Bm |F#m|C#m|Bbm|Gm |Fm |G#m|D#m|
//	                      26, 21, 17, 19, 28, 23, 18, 27, 24, 22, 25, 20
	int luba_inst01[16]  = {  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4};

//                         Piano                           Chromatic_Percussion            Organ                           Guitar                          Bass                            Strings                         Strings_(continued)             Brass                           Reed                            Pipe                            Synth_Lead                      Synth_Pad                       Synth_Effects                   Ethnic                          Percussive                  Sound_effects
//                           +   +   +   +   *   +   +   +   +   +   +   +   +   +   +  16  17  18  19  20   +  22  23  24   +   +   +   +   +   +  31   +   +   +   +   +   +   +   +   +   +   +  43  44  45  46  47   +   +  50  51  52  53  54  55  56   +  58   +   +   +   +   +   +   +   +  67  68  69  70  71  72  73  74   +   +   +  78  79  80   +  82  83  84  85  86  87  88  89  90   +   +   +   +   +   +   +   +  99 100 101 102 103 104 105 106 107   + 109 110 111   + 113 114   +   +   +   +   +   +   +   +   +   +   +   +   +   +
//                           1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128
//	int luba_inst02[128] = {  1,  2,  3,  1,  5,  2,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 65, 66, 67, 68, 73, 74, 75, 76, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,  1,  2,  3,  1,  5,  2,  7,  8,  9, 10, 11, 12, 13};
	int luba_inst02[ 16] = { 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74};
	int luba_inst12[ 16] = { 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 21, 21};
	int luba_inst03[ 16] = {  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6};
	int luba_inst04[ 16] = { 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33};

//                           0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60,61
	int luba_ritm_08[RC] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,39,40,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59};
	int luba_ritm_16[RC] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61};
	int luba_ritm3[16] = { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7};
	int luba_ritm4[16] = { 1, 2, 3, 4, 7, 6, 7,16, 5, 6, 7, 5, 6, 7, 2, 3};
	string durtype[7] = {"whole","half","quarter","eighth","16th","32th","64th"};
	string  beam_c[4] = {"none","begin","continue","end"};
	string  numfish[20] = {"  0","  1","  2","  3","  4","  5","  6","  7","  8","  9"," 10"," 11"," 12"," 13"," 14"," 15"," 16"," 17"," 18"," 19"};
	string  numstup[7]  = {"    I","   II","  III","   IV","    V","   VI","  VII"};
	string  akkton = "", nameris1 = "", nameris2 = "", vrmton1 = "", vrmton2 = "", otklton1, temp;
	char buf[3],tmp;
	int nf1, nf2, nf3, nf4, mtime, ptime, gtime, btime, i, j, k, l, l1, l2, m, m1, m2, m3, m4, n, o, vn, t, a;
	int mpr[4*MTC*KC][4][6], fish1[4][5], fish2[4][5], fish3[4][5], fish4[4][5], poslak1[4*MTC*KC][4], poslak2[4*MTC*KC];
	int cfi1,cfi2,cfi3,cfi4; // point rhythm  pattern melody
	char pcTimeString[32]; time_t ttCurTime; time( &ttCurTime ); tm* tmTime = localtime( &ttCurTime ); strftime( pcTimeString, 32, "func_%Y-%m-%d_%H-%M-%S.xml", tmTime );
//================================================== Main Config =======================================================================
//
	srand( time( 0 )); comp = matrcomp[10]; kc = comp.ntime; ds = pow(2,2); dc = pow(2,1+(rand()%2)); // *CH*
	tt = ( rand()%2 == 0 ? luba_min[rand()%12] : luba_maj[rand()%12] ); // tt = 22; // *CH*
	ton = tona[tt]; snk = ( (rand()%2 == 0) ? true : false );  // *CH*
	for (n = 0; n < 12; n++) if (tonal[tt][n].stp != 0) cno++;
	l = 0; for (i = 0; i <  9; i++) { for (j = 0; j < 12; j++) { if (tonal[tt][j].stp != 0) { notet[l].nn=note[12*i+j].nn; notet[l].stp = tonal[tt][j].stp; notet[l].c1n = tonal[tt][j].c1n; notet[l].a1n = tonal[tt][j].a1n; notet[l].c2n = note[12*i+j].c2n; notet[l].a2n = note[12*i+j].a2n; notet[l].ust = tonal[tt][j].ust; l++; } } }
	kmin = (OKT-1)*cno+SD1; kmax = (OKT+2)*cno-SD2;
	for (n = kmin; n <= kmax; n++) { if (notet[n].ust) { noteu[cus] = n; cus++; } }
	instrum[0] = luba_inst01[rand()%16]; instrum[1] = luba_inst02[rand()%16]; instrum[2] = luba_inst03[rand()%16]; instrum[3] = luba_inst04[rand()%16];
	for(i = 0; i < 16; i++) { ritmris1.fish[i] = ritmris2.fish[i] = ritmris3.fish[i] = ritmris4.fish[i] = 0; }

	l1 = l2 = 0;
	cfi1 = rand()%5;
	cfi2 = rand()%5; // *CH*

	l = rand()%2;
	if (cfi1 == 4)
	{
		ritmris1 = matris[ ( l == 0 ? luba_ritm_16[rand()%RC] : luba_ritm_08[rand()%RC] ) ];
		l1 = ( ( l == 0 ) ? mldris16[ritmris1.ntime-1][rand()%256] : mldris08[ritmris1.ntime-1][rand()%16 ] );
		k = l1; if ( l == 0 ) { for(i = 0; i < 8; i++) { ritm1[i] = 1+k%2; k = k/2; } } else { for(i = 0; i < 4; i++) { ritm1[i] = ritm1[i+4] = 1+k%2; k = k/2; } }
	}
	else
	{
		ritmris1.ntime = ( (TC == 4) ? (2+rand()%4) : (3+rand()%4) ); // 1+(rand()%(l == 0 ? 16 : 8));
		for(i = 0; i < ritmris1.ntime; i++) { ritmris1.fish[i] = ( i == 0 ? 0 : (rand()%3 == 0 ? 10 : 0 ) ) + ( cfi1 == 3 ? rand()%8 : tfish[cfi1][rand()%4] ); }
		l1 = ( ( l == 0 ) ? mldris16[ritmris1.ntime-1][rand()%256] : mldris08[ritmris1.ntime-1][rand()%16 ] );
		if ( rand()%2 == 0 )
		{
			if (cfi1 == 0) { l1 = 0; cfi2 = 2; }
			if (cfi1 == 1) { if ( rand()%2 == 0 ) { l1 = 0; cfi2 = 2; } else { l1 = 255; cfi2 = 0; } }
			if (cfi1 == 2) { l1 = 255; cfi2 = 0; }
		}
		k = l1; if ( l == 0 ) { for(i = 0; i < 8; i++) { ritm1[i] = 1+k%2; k = k/2; } } else { for(i = 0; i < 4; i++) { ritm1[i] = ritm1[i+4] = 1+k%2; k = k/2; } }
		ritmris1.istok = "Myself"; ritmris1.stil = "Random";
	}
	for(i = 0; i < 8; i++) { vrmton1 = vrmton1+numfish[ritm1[i]]; }
	k = 0; for(i = 0; i < 8; i++) { k = k+(ritm1[i]-1)*pow(2,i); } l1 = k; cout << "l1: " << k << endl;

	l = rand()%2;
	if (cfi2 == 4)
	{
		ritmris2 = matris[ ( l == 0 ? luba_ritm_16[rand()%RC] : luba_ritm_08[rand()%RC] ) ];
		l2 = ( ( l == 0 ) ? mldris16[ritmris2.ntime-1][rand()%256] : mldris08[ritmris2.ntime-1][rand()%16 ] );
		k = l2; if ( l == 0 ) { for(i = 0; i < 8; i++) { ritm2[i] = 1+k%2; k = k/2; } } else { for(i = 0; i < 4; i++) { ritm2[i] = ritm2[i+4] = 1+k%2; k = k/2; } }
	}
	else
	{
		ritmris2.ntime = ( (TC == 4) ? (2+rand()%3) : (3+rand()%3) ); // 1+(rand()%(l == 0 ? 16 : 8));
		for(i = 0; i < ritmris2.ntime; i++) { ritmris2.fish[i] = ( i == 0 ? 0 : (rand()%3 == 0 ? 10 : 0 ) ) + ( cfi2 == 3 ? rand()%8 : tfish[cfi2][rand()%4] ); }
		l2 = ( ( l == 0 ) ? mldris16[ritmris2.ntime-1][rand()%256] : mldris08[ritmris2.ntime-1][rand()%16 ] ); if ( (rand()%3 == 0) && (l == 0) ) { l2 = ( ( rand()%2 == 0 ) ? l1 : 255-l1 ); }
		if( (cfi1 == 0) && (l1 ==   0) && (cfi2 == 2) ) { l2 = 255; instrum[0] = luba_inst12[rand()%16]; }
		if( (cfi1 == 1) && (l1 ==   0) && (cfi2 == 2) ) { l2 = 255; instrum[0] = luba_inst12[rand()%16]; }
		if( (cfi1 == 1) && (l1 == 255) && (cfi2 == 0) ) { l2 =   0; instrum[1] = luba_inst12[rand()%16]; }
		if( (cfi1 == 2) && (l1 == 255) && (cfi2 == 0) ) { l2 =   0; instrum[1] = luba_inst12[rand()%16]; }
		k = l2; if ( l == 0 ) { for(i = 0; i < 8; i++) { ritm2[i] = 1+k%2; k = k/2; } } else { for(i = 0; i < 4; i++) { ritm2[i] = ritm2[i+4] = 1+k%2; k = k/2; } }
		ritmris2.istok = "Myself"; ritmris2.stil = "Random";
	}
	for(i = 0; i < 8; i++) { vrmton2 = vrmton2+numfish[ritm2[i]]; }
	k = 0; for(i = 0; i < 8; i++) { k = k+(ritm2[i]-1)*pow(2,i); } l2 = k; cout << "l2: " << k << endl << endl;

	cout << "cfi1: " << cfi1 << " l1: " << l1 << endl; cout << "cfi2: " << cfi2 << " l2: " << l2 << endl << endl;

	for(i = 0; i < ritmris1.ntime; i++) { if( !snk ) ritmris1.fish[i] = ritmris1.fish[i]%10; nameris1 = nameris1+numfish[ritmris1.fish[i]]; }
	for(i = 0; i < ritmris2.ntime; i++) { if( !snk ) ritmris2.fish[i] = ritmris2.fish[i]%10; nameris2 = nameris2+numfish[ritmris2.fish[i]]; }

//	if ((ritmris1.ntime <= TC) && (ritmris2.ntime <= TC)) tc = TC; else if ((ritmris1.ntime <= 2*TC) && (ritmris2.ntime <= 2*TC)) tc = 2*TC; else tc = 4*TC;
	tc = TC;

	vl = (ton.lad == "minor" ? matrvl1[rand()%3] : matrvl2[rand()%3] );

	posakk.ntime = 0; for(i = 0; i < 8; i++) { for(j = 0; j < 9; j++) posakk.akkord[i][j] = 0; } posakk.ritm = -1; posakk.poslkon = "";

	if ( rand()%2 == 0 )
	{
		pa = GA+rand()%(GGA-GA);
		if ( ( ton.ntime != 0 ) && ( rand()%4 != 0 ) ) { pa = ton.pa[rand()%ton.ntime]; vl = 0; } posakk = matakk[pa];
		otklton1 = (vl==126 ? "7#" : (vl==215 ? "6b" : (vl==110 ? "1b" : (vl==224 ? "5#" : (vl==114 ? "5b" : (vl==221 ? "2#" : "  "))))));
	}
	else
	{
		pa = -1; vl = 0;
		posakk.ntime = 3+rand()%6;
		o = (ton.lad == "minor" ? matrvl1[rand()%3] : matrvl2[rand()%3] );
		for(i = 0; i < posakk.ntime; i++)
		{
			posakk.akkord[i][0] = (i == 0 ? 7 : 5+2*(rand()%2));
			posakk.akkord[i][1]=posakk.akkord[i][3]=posakk.akkord[i][5]=posakk.akkord[i][7]=( i == 0 ? 0 : rand()%7 );
			j = 0; if (i != 0) { if ( funstot( (posakk.akkord[i][0] == 7 ? 4 : 3), posakk.akkord[i][1], o%10) ) if ( rand()%3 != 0 ) { j = o%100; } }
			posakk.akkord[i][2]=posakk.akkord[i][4]=posakk.akkord[i][6]=posakk.akkord[i][8] = j;
			if (posakk.akkord[i][2] != 0) { tmp = '0'+((posakk.akkord[i][2]%10)+1); temp = tmp; } else temp = " ";
			posakk.poslkon = posakk.poslkon + numstup[posakk.akkord[i][1]] + temp + (posakk.akkord[i][2] == 0 ? " " : ( (posakk.akkord[i][2])/10 == 1 ? "b" : "#" ));
		}
		otklton1 = (o==126 ? "7#" : (o==215 ? "6b" : (o==110 ? "1b" : (o==224 ? "5#" : (o==114 ? "5b" : (o==221 ? "2#" : "  "))))));
	}

//  vl==126==7#  vl==110==1b  vl==114==5b
//  vl==215==6b  vl==224==5#  vl==221==2#

	vrmton1 = vrmton1+"  "+otklton1;

	if ( posakk.ritm < 0 ) { i = luba_ritm3[rand()%16];  ritm3 = 1+rand()%5; } else { i = posakk.ritm; ritm3 = 5; } ritmris3 = matris[i]; cout << "ritmris3: " << i << " - " << ritm3 << endl;
	i = luba_ritm4[rand()%16]; ritm4 = 1+rand()%5; ritmris4 = matris[i]; cout << "ritmris4: " << i << " - " << ritm4 << endl << endl;

	vt = (60+rand()%181)/(dc == 2 ? 2 : 1); // *CH*

	vol[0] = ( VOL*80)/100; vol[1] = ( VOL*60)/100; vol[2] = ( VOL*70)/100; vol[3] = (VOL*100)/100;

	for (n = 0; n < 12; n++) { m = (ton.bt+n)%12; i = tonal[tt][m].stp; if ( i > 0) { if ((ton.sa[i-1][0] == '1') && (ton.sa[i-1][1] == '0')) { buf[0] = ' '; } if ((ton.sa[i-1][0] == '0') && (ton.sa[i-1][1] == '1')) { buf[0] = 'm'; } if ((ton.sa[i-1][0] == '0') && (ton.sa[i-1][1] == '0')) { buf[0] = 'o'; } if ((ton.sa[i-1][0] == '1') && (ton.sa[i-1][1] == '1')) { buf[0] = '+'; } if (tonal[tt][m].a1n == ' ') { akkton = akkton+tonal[tt][m].c1n+buf[0]+"  "; } else { akkton = akkton+tonal[tt][m].c1n+tonal[tt][m].a1n+buf[0]+" "; } } }
//	cout << "A-> " << ritmris1.ntime << ", " << ritmris1.fish[0] << ", " << ritmris1.fish[1] << ", " << ritmris1.fish[2] << ", " << ritmris1.fish[3] << ", " << ritmris1.fish[4] << ", " << ritmris1.fish[5] << ", " << ritmris1.fish[6] << ", " << ritmris1.fish[7] << ", " << ritmris1.istok << ", " << ritmris1.stil << ", " << vrmton1 << endl;
//=========================================================================================================================
	for (i = 0; i < 4*MTC*KC; i++) { for (j = 0; j < 4; j++) { for (k = 0; k < 6; k++) mpr[i][j][k] = 0; } }
	ic = ib = nf1 = nf2 = nf3 = nf4 = cfi1 = cfi2 = cfi3 = cfi4 = 0; pfunc = -1;
	for (i = 0; i < tc; i++) // ================================ melody podgol
	{
		mpr[i][0][0] = ritm1[i%8]; mpr[i][1][0] = ritm2[i%8];
		for (k = 0; k < mpr[i][0][0]; k++ ) { mpr[i][0][k+1] = ritmris1.fish[cfi1%ritmris1.ntime]; cfi1++; }
		for (k = 0; k < mpr[i][1][0]; k++ ) { mpr[i][1][k+1] = ritmris2.fish[cfi2%ritmris2.ntime]; cfi2++; }
	}

	for (i = 0; i < kc*tc; i++)
	{
		if ((i+1)==kc*tc) { mpr[i][2][0] = mpr[i][3][0] = 1; mpr[i][2][1] = mpr[i][3][1] = 7; cfi3++; cfi4++; }
		else
		{
			mpr[i][2][0] = 1; if ( (1+(cfi3%4)) == ritm3 ) { mpr[i][2][1] = 1; } else { mpr[i][2][1] = ritmris3.fish[cfi3%ritmris3.ntime]; } cfi3++;
			
			mpr[i][3][0] = 1;
			if ( (1+(cfi4%4)) == ritm4 )
			{
				for (k = 0; k < mpr[i][3][0]; k++ ) { mpr[i][3][k+1] = ritmris4.fish[cfi4%ritmris4.ntime]; cfi4++; } mpr[i][3][5] = 0;
			}
			else
			{
				for (k = 0; k < mpr[i][3][0]; k++ ) { mpr[i][3][k+1] = rand()%8; cfi4++; } mpr[i][3][5] = 1;
			}
		}

		for (k = 0; k < mpr[i][2][0]; k++)   // ================================ garm
		{
			m3 = mpr[i][2][k+1]; m = m3%10; a = 0; for (j = 0; j < 4; j++) { for (l = 0; l < 5; l++) { fish3[j][l] = domino[m].fish[0][0][j][l]; } }
			for (j = 0; j < 4; j++)
			{
				if( fish3[j][1] != 0)
				{
					n  = posakk.akkord[i%posakk.ntime][2*j+1]; o  = posakk.akkord[i%posakk.ntime][2*j+2];
					vn = o/10;
					o = o%10;
					t  = posakk.akkord[i%posakk.ntime][0];
					if ( (vl != 0) && funstot( (t == 7 ? 4 : 3), n, vl%10 ) && (((ic+a)/posakk.ntime)%2 == 1) ) { vn = (vl/10)%10; o = vl%10; }
					poslak1[ic+a][0] = n; poslak1[ic+a][1] = vn; poslak1[ic+a][2] = o; poslak1[ic+a][3] = t; a++;
				}
			}
			ic = ic+a;
		}

		for (k = 0; k < mpr[i][3][0]; k++)   // ================================ bass
		{
			m4 = mpr[i][3][k+1]; m = m4%10; a = 0;
			for (j = 0; j < 4; j++) { for (l = 0; l < 5; l++) { fish4[j][l] = domino[m].fish[0][0][j][l]; } }
			for (j = 0; j < 4; j++)
			{
				if( fish4[j][1] != 0) { poslak2[ib+a] = posakk.akkord[i%posakk.ntime][2*j+1]; a++; }
			}
			ib = ib+a;
		}
	}
	if(ic > 1 ) { i = 0; if( i == 0) { poslak1[ic-1][0] = 0; } if( i == 1) { poslak1[ic-1][0] = 3; } if( i == 2) { poslak1[ic-1][0] = 4; } poslak1[ic-1][1] = 0; poslak1[ic-1][2] = 0; poslak1[ic-1][3] = 7; }
	if(ib > 1 ) { i = 0; if( i == 0) { poslak2[ib-1] = 0; } if( i == 1) { poslak2[ib-1]= 3; } if( i == 2) { poslak2[ib-1] = 4; } }

	cout << "N такта                      |"; for (i = 0; i < kc*tc; i++) { cout << setw(2) << i+1          << "          |"; } cout  << endl;
	cout << "кол-во фишек/такт мелодии    |"; for (i = 0; i <    tc; i++) { cout << setw(2) << mpr[i][0][0] << "          |"; } cout  << endl;
	cout << "кол-во фишек/такт подголоска |"; for (i = 0; i <    tc; i++) { cout << setw(2) << mpr[i][1][0] << "          |"; } cout  << endl;
	cout << "кол-во фишек/такт гармонии   |"; for (i = 0; i < kc*tc; i++) { cout << setw(2) << mpr[i][2][0] << "          |"; } cout  << endl;
	cout << "кол-во фишек/такт баса       |"; for (i = 0; i < kc*tc; i++) { cout << setw(2) << mpr[i][3][0] << "          |"; } cout  << endl << endl;
	cout << "номер фишки мелодии          |"; for (i = 0; i <    tc; i++) { for (j = 1; j < 5; j++) { if ( j <= mpr[i][0][0] ) { cout << setw(2) << nf1+1 << " "; nf1++; } else cout << "   "; } cout << "|"; } cout  << endl;
	cout << "фишка мелодии                |"; for (i = 0; i <    tc; i++) { for (j = 1; j < 5; j++) { if ( j <= mpr[i][0][0] ) { cout << setw(2) << mpr[i][0][j] << " "; } else cout << "   "; } cout << "|"; } cout  << endl;
	cout << "номер фишки подголоска       |"; for (i = 0; i <    tc; i++) { for (j = 1; j < 5; j++) { if ( j <= mpr[i][1][0] ) { cout << setw(2) << nf2+1 << " "; nf2++; } else cout << "   "; } cout << "|"; } cout  << endl;
	cout << "фишка подголоска             |"; for (i = 0; i <    tc; i++) { for (j = 1; j < 5; j++) { if ( j <= mpr[i][1][0] ) { cout << setw(2) << mpr[i][1][j] << " "; } else cout << "   "; } cout << "|"; } cout  << endl;
	cout << "номер фишки гармонии         |"; for (i = 0; i < kc*tc; i++) { for (j = 1; j < 5; j++) { if ( j <= mpr[i][2][0] ) { cout << setw(2) << nf3+1 << " "; nf3++; } else cout << "   "; } cout << "|"; } cout  << endl;
	cout << "фишка гармонии               |"; for (i = 0; i < kc*tc; i++) { for (j = 1; j < 5; j++) { if ( j <= mpr[i][2][0] ) { cout << setw(2) << mpr[i][2][j] << " "; } else cout << "   "; } cout << "|"; } cout  << endl;
	cout << "номер фишки баса             |"; for (i = 0; i < kc*tc; i++) { for (j = 1; j < 5; j++) { if ( j <= mpr[i][3][0] ) { cout << setw(2) << nf4+1 << " "; nf4++; } else cout << "   "; } cout << "|"; } cout  << endl;
	cout << "фишка баса                   |"; for (i = 0; i < kc*tc; i++) { for (j = 1; j < 5; j++) { if ( j <= mpr[i][3][0] ) { cout << setw(2) << mpr[i][3][j] << " "; } else cout << "   "; } cout << "|"; } cout  << endl;
	cout << "изменить фишку баса          |"; for (i = 0; i < kc*tc; i++) { for (j = 1; j < 5; j++) { if ( j <= mpr[i][3][0] ) { cout << setw(2) << mpr[i][3][5] << " "; } else cout << "   "; } cout << "|"; } cout  << endl;

//=========================================================================================================================
	for (n = 0; n < NC; n++) { melody[n].tact = podgol[n].tact = temp0[n].tact = temamel[n].tact = temapod[n].tact = chord[n].tact = garm[n].tact = bass[n].tact = 0; for (t = 0; t < 3; t++) { garm[n].sa[t] = ' '; } }
	im = ip = ig = ic = ib = ipp = nf1 = nf2 = nf3 = nf4 = m = mtime = ptime = gtime = btime = 0; st = sm = s3 = ss = sd = s6 = s7 = 0; pfunc = -1;
 //========================================================================= melody podgol
	for (i = 0; i < tc; i++)
	{
		for (k = 0; k < mpr[i][0][0]; k++) {
			m1 = mpr[i][0][k+1]; m = m1%10; n = m1/10;
			for (j = 0; j < 4; j++) { for (l = 0; l < 5; l++) { fish1[j][l] = domino[m].fish[n][0][j][l]; } }
			for (j = 0; j < 4; j++) {
				if( fish1[j][1] != 0) {
					melody[im].tact = i+1;
					melody[im].fishka = m1;
					melody[im].qfish  = j;
					melody[im].nfish  = nf1+1;
					melody[im].liga   = (((n != 0) && (j == 0) ) ? true : false);
					melody[im].step   = cno*OKT+ton.stp[0];
					melody[im].nn     = notet[melody[im].step].nn;
					melody[im].note   = notet[melody[im].step].c1n;
					melody[im].sign   = notet[melody[im].step].a1n;
					melody[im].octave = fungrokt(melody[im].note, melody[im].sign, melody[im].nn/12);
					if ( ((4*mpr[i][0][0]*ds)/dc)%fish1[j][1] == 0) {
						melody[im].duration = ((4*mpr[i][0][0]*ds)/dc)/fish1[j][1];
						melody[im].dot = 0;
					}
					else {
						melody[im].duration = ((4*mpr[i][0][0]*ds)/dc)/(fish1[j][1]-1);
						melody[im].dot = 1;
					}
					mtime = mtime+(LD*(2+melody[im].dot))/(2*melody[im].duration);
					melody[im].time = mtime;
					melody[im].voice = 0;
					melody[im].stem   = 1;
					melody[im].staff  = 1;
					melody[im].beam1  = fish1[j][3];
					melody[im].beam2  = fish1[j][4];
					melody[im].accent = fish1[j][2];
					melody[im].tie    =  0;
					melody[im].func   = -1;
					for (t = 0; t < 3; t++) { melody[im].sa[t] = ' '; }
					im++;
				}
			}
			nf1++;
		}
		for (k = 0; k < mpr[i][1][0]; k++) {
			m2 = mpr[i][1][k+1]; m = m2%10; n = m2/10;
			for (j = 0; j < 4; j++) { for (l = 0; l < 5; l++) { fish2[j][l] = domino[m].fish[n][0][j][l]; } }
			for (j = 0; j < 4; j++) {
				if( fish2[j][1] != 0) {
					podgol[ip].tact = i+1;
					podgol[ip].fishka = m2;
					podgol[ip].qfish  = j;
					podgol[ip].nfish  = nf2+1;
					podgol[ip].liga   = (((n != 0) && (j == 0) ) ? true : false);
					podgol[ip].step   = cno*OKT+ton.stp[0];
					podgol[ip].nn     = notet[podgol[ip].step].nn;
					podgol[ip].note   = notet[podgol[ip].step].c1n;
					podgol[ip].sign   = notet[podgol[ip].step].a1n;
					podgol[ip].octave = fungrokt(podgol[ip].note, podgol[ip].sign, podgol[ip].nn/12);
					if ( ((4*mpr[i][1][0]*ds)/dc)%fish2[j][1] == 0) {
						podgol[ip].duration = ((4*mpr[i][1][0]*ds)/dc)/fish2[j][1];
						podgol[ip].dot = 0;
					}
					else {
						podgol[ip].duration = ((4*mpr[i][1][0]*ds)/dc)/(fish2[j][1]-1);
						podgol[ip].dot = 1;
					}
					ptime = ptime+(LD*(2+podgol[ip].dot))/(2*podgol[ip].duration);
					podgol[ip].time = ptime;
					podgol[ip].voice = 0;
					podgol[ip].stem   = 1;
					podgol[ip].staff  = 1;
					podgol[ip].beam1  = fish2[j][3];
					podgol[ip].beam2  = fish2[j][4];
					podgol[ip].accent = fish2[j][2];
					podgol[ip].tie    =  0;
					podgol[ip].func   = -1;
					for (t = 0; t < 3; t++) { podgol[ip].sa[t] = ' '; }
					ip++;
				}
			}
			nf2++;
		}
	}
	for (i = 0; i < kc*tc; i++)
	{
		for (k = 0; k < mpr[i][2][0]; k++) { //=========================================================================chord
			m3 = mpr[i][2][k+1];  m = m3%10; n = m3/10;
			for (j = 0; j < 4; j++) { for (l = 0; l < 5; l++) { fish3[j][l] = domino[m].fish[n][0][j][l]; } }
			for (j = 0; j < 4; j++) {
				if( fish3[j][1] != 0) {
					chord[ic].tact = i+1;
					chord[ic].fishka = m3;
					chord[ic].qfish  = j;
					chord[ic].nfish  = nf3+1;
					chord[ic].liga   = (((n != 0) && (j == 0) ) ? true : false);
					chord[ic].step   = cno*GRM+ton.stp[0];
					chord[ic].nn     = notet[chord[ic].step].nn;
					chord[ic].note   = notet[chord[ic].step].c1n;
					chord[ic].sign   = notet[chord[ic].step].a1n;
					chord[ic].octave = fungrokt(chord[ic].note, chord[ic].sign, chord[ic].nn/12);
					if ( ((4*mpr[i][2][0]*ds)/dc)%fish3[j][1] == 0) {
						chord[ic].duration = ((4*mpr[i][2][0]*ds)/dc)/fish3[j][1];
						chord[ic].dot = 0;
					}
					else {
						chord[ic].duration = ((4*mpr[i][2][0]*ds)/dc)/(fish3[j][1]-1);
						chord[ic].dot = 1;
					}
					gtime = gtime+(LD*(2+chord[ic].dot))/(2*chord[ic].duration);
					chord[ic].time   = gtime;
					chord[ic].voice  = 0;
					chord[ic].stem   = 1;
					chord[ic].staff  = 1;
					chord[ic].beam1  = fish3[j][3];
					chord[ic].beam2  = fish3[j][4];
					chord[ic].accent = fish3[j][2];
					chord[ic].tie    =  0;
					chord[ic].func   = -1;
					for (t = 0; t < 3; t++) { chord[ic].sa[t] = ' '; }
					ic++;
				}
			}
			nf3++;
		}
	}
//=========================================================================================================================
	for (i = 0; i < im; i++) { temp0[i] = melody[i]; } funrule1(im); for (i = 0; i < im; i++) { melody[i] = temp0[i]; }
	if (rand()%128 == 0) { ip = im; for (i =  0; i < ip; i++) { podgol[i] = melody[i]; } for (i = ip; i < NC; i++) { podgol[i].tact = 0; } }
	else { for (i = 0; i < ip; i++) { temp0[i] = podgol[i]; } funrule1(ip); for (i = 0; i < ip; i++) { podgol[i] = temp0[i]; } }
//	for (i = 0; i < ip; i++) { podgol[i].step   = melody[i].step; podgol[i].nn     = notet[podgol[i].step].nn; podgol[i].note   = notet[podgol[i].step].c1n; podgol[i].sign   = notet[podgol[i].step].a1n; podgol[i].octave = fungrokt(podgol[i].note, podgol[i].sign, podgol[i].nn/12); podgol[i].tie    = melody[i].tie; }

////////////////////////////////////////////////////////////////////////////////////////////////////
	k = (rand()%2 == 0 ? 0 : 1+rand()%(tc/2));
	imt = im; for (j =   0; j < imt; j++) { temp0[j] = melody[j]; } funcvar0_01(k, (kc < 3 ? 2 : kc-1)); for (j =   0; j < imt; j++) {  temamel[j] =  temp0[j]; }
	cout << "пауза в теме "; if ( k == 0 ) cout << "случайная"; else cout << "периодическая: " << k << " - " << matrpaus[ritmris1.ntime-1][k-1]; cout << endl;
	k = (rand()%2 == 0 ? 0 : 1+rand()%(tc/2));
	ipt = ip; for (j =   0; j < ipt; j++) { temp0[j] = podgol[j]; } funcvar0_01(k, (kc < 3 ? 2 : kc-1)); for (j =   0; j < ipt; j++) {  temapod[j] =  temp0[j]; }
// work
	im = ip = 0;
	for (i = 0; i < kc; i++) {
        switch (comp.var[i][0]) {
        case 0: // обычная вставка мелодии или темы
        	if (i == 0)
        	{
        		if( comp.var[i][1] == 0 ) { for (j = 0; j < imt; j++) { track1[j] =  melody[j]; } for (j = 0; j < ipt; j++) { track2[j] =  podgol[j]; } }
        		if( comp.var[i][1] == 1 ) { for (j = 0; j < imt; j++) { track1[j] = temamel[j]; } for (j = 0; j < ipt; j++) { track2[j] = temapod[j]; } }
        	}
        	else
        	{
    			m1 = track1[im-1].tact; m3 = track1[im-1].nfish; m4 = track1[im-1].time;
        		if( comp.var[i][1] == 0 ) { for (j = 0; j < imt; j++) { track1[im+j] = melody[j];  track1[im+j].tact  = track1[im+j].tact+m1; track1[im+j].nfish = track1[im+j].nfish+m3; track1[im+j].time  = track1[im+j].time+m4; } }
        		if( comp.var[i][1] == 1 ) { for (j = 0; j < imt; j++) { track1[im+j] = temamel[j]; track1[im+j].tact  = track1[im+j].tact+m1; track1[im+j].nfish = track1[im+j].nfish+m3; track1[im+j].time  = track1[im+j].time+m4; } }
    			m1 = track2[ip-1].tact; m3 = track2[ip-1].nfish; m4 = track2[ip-1].time;
        		if( comp.var[i][1] == 0 ) { for (j = 0; j < ipt; j++) { track2[ip+j] =  podgol[j]; track2[ip+j].tact  = track2[ip+j].tact+m1; track2[ip+j].nfish = track2[ip+j].nfish+m3; track2[ip+j].time  = track2[ip+j].time+m4; } }
        		if( comp.var[i][1] == 1 ) { for (j = 0; j < ipt; j++) { track2[ip+j] = temapod[j]; track2[ip+j].tact  = track2[ip+j].tact+m1; track2[ip+j].nfish = track2[ip+j].nfish+m3; track2[ip+j].time  = track2[ip+j].time+m4; } }
        	}
        	break;
        case 1: // с паузами
			m1 = track1[im-1].tact; m3 = track1[im-1].nfish; m4 = track1[im-1].time;
			for (j = 0; j < imt; j++) { temp0[j] =    melody[j]; } funcvar0_01((rand()%(tc/2+1)),comp.var[i][1]);
			for (j = 0; j < imt; j++) { track1[im+j] = temp0[j]; track1[im+j].tact  = track1[im+j].tact+m1; track1[im+j].nfish = track1[im+j].nfish+m3; track1[im+j].time  = track1[im+j].time+m4; }
			m1 = track2[ip-1].tact; m3 = track2[ip-1].nfish; m4 = track2[ip-1].time;
			for (j = 0; j < ipt; j++) { temp0[j] =    podgol[j]; } funcvar0_01((rand()%(tc/2+1)),comp.var[i][1]);
			for (j = 0; j < ipt; j++) { track2[ip+j] = temp0[j]; track2[ip+j].tact  = track2[ip+j].tact+m1; track2[ip+j].nfish = track2[ip+j].nfish+m3; track2[ip+j].time  = track2[ip+j].time+m4; }
            break;
        case 2: // со сдвигом
			m2 = ( (rand()%2 == 0) ? 1 : -1 )*comp.var[i][1];
			m1 = track1[im-1].tact; m3 = track1[im-1].nfish; m4 = track1[im-1].time;
			for (j = 0; j < imt; j++) { temp0[j] = temamel[j]; if (temp0[j].step != -1 ) { temp0[j].step   = temp0[j].step+m2; temp0[j].nn     = notet[temp0[j].step].nn; temp0[j].note   = notet[temp0[j].step].c1n; temp0[j].sign   = notet[temp0[j].step].a1n; temp0[j].octave = fungrokt(temp0[j].note, temp0[j].sign, temp0[j].nn/12); } }
			for (j = 0; j < imt; j++) { track1[im+j] = temp0[j]; track1[im+j].tact  = track1[im+j].tact+m1; track1[im+j].nfish = track1[im+j].nfish+m3; track1[im+j].time  = track1[im+j].time+m4; }
			m1 = track2[ip-1].tact; m3 = track2[ip-1].nfish; m4 = track2[ip-1].time;
			for (j = 0; j < ipt; j++) { temp0[j] = temapod[j]; if (temp0[j].step != -1 ) { temp0[j].step   = temp0[j].step+m2; temp0[j].nn     = notet[temp0[j].step].nn; temp0[j].note   = notet[temp0[j].step].c1n; temp0[j].sign   = notet[temp0[j].step].a1n; temp0[j].octave = fungrokt(temp0[j].note, temp0[j].sign, temp0[j].nn/12); } }
			for (j = 0; j < ipt; j++) { track2[ip+j] = temp0[j]; track2[ip+j].tact  = track2[ip+j].tact+m1; track2[ip+j].nfish = track2[ip+j].nfish+m3; track2[ip+j].time  = track2[ip+j].time+m4; }
            break;
        case 3: // обратка
			m1 = track1[im-1].tact; m3 = track1[im-1].nfish; m4 = track1[im-1].time;
			for (j = 0; j <   imt; j++) { temp0[j] =   ( comp.var[i][1] == 0 ? melody[j] : temamel[j] ); }
			for (j = 0; j < imt/2; j++) { m2 = temp0[j].step; temp0[j].step = temp0[imt-1-j].step; temp0[imt-1-j].step = m2; }
			for (j = 0; j <   imt; j++) { if (temp0[j].step != -1 ) { temp0[j].nn     = notet[temp0[j].step].nn; temp0[j].note   = notet[temp0[j].step].c1n; temp0[j].sign   = notet[temp0[j].step].a1n; temp0[j].octave = fungrokt(temp0[j].note, temp0[j].sign, temp0[j].nn/12); } }
			for (j = 0; j <   imt; j++) { track1[im+j] = temp0[j]; track1[im+j].tact  = track1[im+j].tact+m1; track1[im+j].nfish = track1[im+j].nfish+m3; track1[im+j].time  = track1[im+j].time+m4; }
			m1 = track2[ip-1].tact; m3 = track2[ip-1].nfish; m4 = track2[ip-1].time;
			for (j = 0; j <   ipt; j++) { temp0[j] =   ( comp.var[i][1] == 0 ? podgol[j] : temapod[j] ); }
			for (j = 0; j < ipt/2; j++) { m2 = temp0[j].step; temp0[j].step = temp0[ipt-1-j].step; temp0[ipt-1-j].step = m2; }
			for (j = 0; j <   ipt; j++) { if (temp0[j].step != -1 ) { temp0[j].nn     = notet[temp0[j].step].nn; temp0[j].note   = notet[temp0[j].step].c1n; temp0[j].sign   = notet[temp0[j].step].a1n; temp0[j].octave = fungrokt(temp0[j].note, temp0[j].sign, temp0[j].nn/12); } }
			for (j = 0; j <   ipt; j++) { track2[ip+j] = temp0[j]; track2[ip+j].tact  = track2[ip+j].tact+m1; track2[ip+j].nfish = track2[ip+j].nfish+m3; track2[ip+j].time  = track2[ip+j].time+m4; }
            break;
        }
		im = (1 + i)*imt;
		ip = (1 + i)*ipt;
	}
	for (j = im; j < EC; j++) { track1[j].tact = 0; }
	for (j = ip; j < EC; j++) { track2[j].tact = 0; }
// work
	i = 0; while ( i < im ) { j = track1[i].tact; m1 = track1[i].step; while ( (i < im) && (j == track1[i].tact) ) { i++; } m3 = track1[i-1].step; if (m1 > m3) { mpr[j-1][0][5] =  1; } else if (m1 < m3) { mpr[j-1][0][5] = -1; } else { mpr[j-1][0][5] = (rand()%2 == 0 ? -1 : 1); } }

	i = 0; while ( i < im-1 ) { if (i == 0) { if (track1[i].beam1 == 0 && track1[i+1].beam1 == 2) { track1[i+1].beam1 = 1; track1[i+1].beam2 = 1; } else if (track1[i].beam1 == 0 && track1[i+1].beam1 == 3) { track1[i+1].beam1 = 0; track1[i+1].beam2 = 0; } else if (track1[i].beam1 == 1 && track1[i+1].beam1 == 0) { track1[i].beam1   = 0; track1[i+1].beam2 = 0; } } else { if (track1[i].beam1 == 0 && track1[i+1].beam1 == 2) { track1[i+1].beam1 = 1; track1[i+1].beam2 = 1; } else if (track1[i].beam1 == 0 && track1[i+1].beam1 == 3) { track1[i+1].beam1 = 0; track1[i+1].beam2 = 0; } else if (track1[i].beam1 == 1 && track1[i+1].beam1 == 0) { track1[i].beam1   = 0; track1[i+1].beam2 = 0; } else if (track1[i].beam1 == 2 && track1[i+1].beam1 == 0) { track1[i].beam1   = 3; track1[i+1].beam2 = 3; } } if( track1[i+1].liga && ( track1[i].step != track1[i+1].step ) ) { track1[i+1].liga = false; track1[i].tie = track1[i+1].tie = 0; } i++; }
	i = 0; while ( i < ip-1 ) { if (i == 0) { if (track2[i].beam1 == 0 && track2[i+1].beam1 == 2) { track2[i+1].beam1 = 1; track2[i+1].beam2 = 1; } else if (track2[i].beam1 == 0 && track2[i+1].beam1 == 3) { track2[i+1].beam1 = 0; track2[i+1].beam2 = 0; } else if (track2[i].beam1 == 1 && track2[i+1].beam1 == 0) { track2[i].beam1   = 0; track2[i+1].beam2 = 0; } } else { if (track2[i].beam1 == 0 && track2[i+1].beam1 == 2) { track2[i+1].beam1 = 1; track2[i+1].beam2 = 1; } else if (track2[i].beam1 == 0 && track2[i+1].beam1 == 3) { track2[i+1].beam1 = 0; track2[i+1].beam2 = 0; } else if (track2[i].beam1 == 1 && track2[i+1].beam1 == 0) { track2[i].beam1   = 0; track2[i+1].beam2 = 0; } else if (track2[i].beam1 == 2 && track2[i+1].beam1 == 0) { track2[i].beam1   = 3; track2[i+1].beam2 = 3; } } if( track2[i+1].liga && ( track2[i].step != track2[i+1].step ) ) { track2[i+1].liga = false; track2[i].tie = track2[i+1].tie = 0; } i++; }

	cout << "направление баса             |"; for (i = 0; i < kc*tc; i++) { for (j = 1; j < 5; j++) { if ( j <= mpr[i][3][0] ) { cout << setw(2) << mpr[i][0][5] << " "; } else cout << "   "; } cout << "|"; } cout  << endl << endl;

	for (i = 0; i < kc*tc; i++) { //=========================================================================bass
		for (k = 0; k < mpr[i][3][0]; k++) {
			m4 = mpr[i][3][k+1]; m = m4%10; n = m4/10;
			for (j = 0; j < 4; j++) { for (l = 0; l < 5; l++) { fish4[j][l] = domino[m].fish[n][0][j][l]; } }
			for (j = 0; j < 4; j++) {
				if( fish4[j][1] != 0) {
					bass[ib].tact = i+1;
					bass[ib].fishka = m4;
					bass[ib].qfish  = j;
					bass[ib].nfish  = nf4+1;
					bass[ib].liga   = (((n != 0) && (j == 0) ) ? true : false);
					bass[ib].step   = cno*BAS+(ton.stp[0]+poslak2[ib])%7 + mpr[i][0][5]*mpr[i][3][5]*j;
					bass[ib].nn     = notet[bass[ib].step].nn;
					bass[ib].note   = notet[bass[ib].step].c1n;
					bass[ib].sign   = notet[bass[ib].step].a1n;
					bass[ib].octave = fungrokt(bass[ib].note, bass[ib].sign, bass[ib].nn/12);
					if ( ((4*mpr[i][3][0]*ds)/dc)%fish4[j][1] == 0) {
						bass[ib].duration = ((4*mpr[i][3][0]*ds)/dc)/fish4[j][1];
						bass[ib].dot = 0;
					}
					else {
						bass[ib].duration = ((4*mpr[i][3][0]*ds)/dc)/(fish4[j][1]-1);
						bass[ib].dot = 1;
					}
					btime = btime+(LD*(2+bass[ib].dot))/(2*bass[ib].duration);
					bass[ib].time = btime;
					bass[ib].voice = 0;
					bass[ib].stem   = 1;
					bass[ib].staff  = 1;
					bass[ib].beam1  = fish4[j][3];
					bass[ib].beam2  = fish4[j][4];
					bass[ib].accent = fish4[j][2];
					bass[ib].tie    =  0;
					bass[ib].func   = -1;
					for (t = 0; t < 3; t++) { bass[ib].sa[t] = ' '; }
					ib++;
				}
			}
			nf4++;
		}
	}
	for (i =  0; i < ic; i++) { fungarm(i,poslak1[i][0],poslak1[i][1],poslak1[i][2],poslak1[i][3]); pfunc = func; }
	for (j =  0; j < ig; j++) { track3[j] =    garm[j]; } for (j = ig; j < EC; j++) { track3[j].tact = 0; }
	for (j =  0; j < ib; j++) { track4[j] =    bass[j]; } for (j = ib; j < EC; j++) { track4[j].tact = 0; }
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "нот меллодии: "        <<    im+ip-ipp << "  ";
	cout << "аккордов: "            <<           ic << "  ";
	cout << "пауз: "                <<          ipp << "  ";
	cout << "нот гармонии: "        <<           ig << "  ";
	cout << "нот всего: "           << im+ip-ipp+ig << endl;

	cout << endl << "тоника->" << st << "  медианта->" << sm << "  третья->" << s3 << "  субдоминанта->" << ss << "  доминанта->" << sd << "  шестая->" << s6 << "  седьмая->" << s7 << endl;
	cout << "tt->" << tt << "  kmin->" << kmin << "  kmax->" << kmax << "  cus->" << cus << endl;
	cout << ton.signton1+"      - "+ton.lad+" ("+nameris1+") - "+ritmris1.istok+" "+vrmton1+" pa=" << pa << "   " <<  posakk.poslkon << endl;
	cout << ton.signton2+" - "+ton.lad+" ("+nameris2+") - "+ritmris2.istok+" "+vrmton2 << endl << endl;

	for ( i = kmin; i < kmax+1; i++) { cout << " " << funnote(i%cno) << " "; } cout << endl;
	for ( i = kmin; i < kmax+1; i++) { cout << i << " "; } cout << endl;
	for ( i = kmin; i < kmax+1; i++) { if ( funind(i) == -1 ) cout << "   "; else cout << i << " "; } cout << endl;
	for ( i = kmin; i < kmax+1; i++) { cout << " " << ( funind(i) == -1 ? ' ' : funnote(i%cno) ) << " "; } cout << endl;
//=========================================================================================================================
	for (i = 0; i < im; i++)
	{
		cout << "tact:" << setw(3) << track1[i].tact;
		cout << ", fishka:" << setw(3) << track1[i].fishka;
		cout << ", qfish:" << track1[i].qfish;
		cout << ", nfish:" << setw(3) << track1[i].nfish;
		cout << ", liga:" << (track1[i].liga ? "YES" : "NO ");
		cout << ", step:" << setw(3) << (track1[i].step >=0 ? track1[i].step : -1);
		cout << ", nn:" << setw(3) << (track1[i].step >=0 ? track1[i].nn : -1);
		cout << ", note:" << (track1[i].step >=0 ? track1[i].note : '-');
		cout << ", sign:" << (track1[i].step >=0 ? track1[i].sign : ' ');
		cout << ", octave:" << ( track1[i].step >=0 ? track1[i].octave : OKT);
		cout << ", duration:" << setw(2) << track1[i].duration;
		cout << ", time:" << setw(6) << track1[i].time;
		cout << ", voice:" << track1[i].voice;
		cout << ", dot:" << track1[i].dot;
		cout << ", stem:" << track1[i].stem;
		cout << ", staff:" << track1[i].staff;
		cout << ", beam1:" << track1[i].beam1;
		cout << ", beam2:" << track1[i].beam2;
		cout << ", accent:" << track1[i].accent;
		cout << ", tie:" << track1[i].tie;
		cout << ", func:" << setw(2) << track1[i].func;
		cout << ", sa:" << track1[i].sa[0] << track1[i].sa[1] << track1[i].sa[2] << endl;
	}
	cout << im << endl << endl;

	for (i = 0; i < ip; i++)
	{
		cout << "tact:" << setw(3) << track2[i].tact;
		cout << ", fishka:" << setw(3) << track2[i].fishka;
		cout << ", qfish:" << track2[i].qfish;
		cout << ", nfish:" << setw(3) << track2[i].nfish;
		cout << ", liga:" << (track2[i].liga ? "YES" : "NO ");
		cout << ", step:" << setw(3) << (track2[i].step >=0 ? track2[i].step : -1);
		cout << ", nn:" << setw(3) << (track2[i].step >=0 ? track2[i].nn : -1);
		cout << ", note:" << (track2[i].step >=0 ? track2[i].note : '-');
		cout << ", sign:" << (track2[i].step >=0 ? track2[i].sign : ' ');
		cout << ", octave:" << ( track2[i].step >=0 ? track2[i].octave : OKT);
		cout << ", duration:" << setw(2) << track2[i].duration;
		cout << ", time:" << setw(6) << track2[i].time;
		cout << ", voice:" << track2[i].voice;
		cout << ", dot:" << track2[i].dot;
		cout << ", stem:" << track2[i].stem;
		cout << ", staff:" << track2[i].staff;
		cout << ", beam1:" << track2[i].beam1;
		cout << ", beam2:" << track2[i].beam2;
		cout << ", accent:" << track2[i].accent;
		cout << ", tie:" << track2[i].tie;
		cout << ", func:" << setw(2) << track2[i].func;
		cout << ", sa:" << track2[i].sa[0] << track2[i].sa[1] << track2[i].sa[2] << endl;
	}
	cout << ip << endl << endl;

	for (i = 0; i < ic; i++)
	{
		cout << "tact:" << setw(3) << chord[i].tact;
		cout << ", fishka:" << setw(3) << chord[i].fishka;
		cout << ", qfish:" << chord[i].qfish;
		cout << ", nfish:" << setw(3) << chord[i].nfish;
		cout << ", liga:" << (chord[i].liga ? "YES" : "NO ");
		cout << ", step:" << setw(3) << chord[i].step;
		cout << ", nn:" << setw(3) << chord[i].nn;
		cout << ", note:" << chord[i].note;
		cout << ", sign:" << chord[i].sign;
		cout << ", octave:" << chord[i].octave;
		cout << ", duration:" << setw(2) << chord[i].duration;
		cout << ", time:" << setw(6) << chord[i].time;
		cout << ", voice:" << chord[i].voice;
		cout << ", dot:" << chord[i].dot;
		cout << ", stem:" << chord[i].stem;
		cout << ", staff:" << chord[i].staff;
		cout << ", beam1:" << chord[i].beam1;
		cout << ", beam2:" << chord[i].beam2;
		cout << ", accent:" << chord[i].accent;
		cout << ", tie:" << chord[i].tie;
		cout << ", func:" << setw(2) << chord[i].func;
		cout << ", sa:" << chord[i].sa[0] << chord[i].sa[1] << chord[i].sa[2] << endl;
	}
	cout << ic << endl << endl;

	for (i = 0; i < ig; i++)
	{
		if(track3[i].func >= 0) cout << endl;
		cout << "tact:" << setw(3) << track3[i].tact;
		cout << ", fishka:" << setw(3) << track3[i].fishka;
		cout << ", qfish:" << track3[i].qfish;
		cout << ", nfish:" << setw(3) << track3[i].nfish;
		cout << ", liga:" << (track3[i].liga ? "YES" : "NO ");
		cout << ", step:" << setw(3) << track3[i].step;
		cout << ", nn:" << setw(3) << track3[i].nn;
		cout << ", note:" << track3[i].note;
		cout << ", sign:" << track3[i].sign;
		cout << ", octave:" << track3[i].octave;
		cout << ", duration:" << setw(2) << track3[i].duration;
		cout << ", time:" << setw(6) << track3[i].time;
		cout << ", voice:" << track3[i].voice;
		cout << ", dot:" << track3[i].dot;
		cout << ", stem:" << track3[i].stem;
		cout << ", staff:" << track3[i].staff;
		cout << ", beam1:" << track3[i].beam1;
		cout << ", beam2:" << track3[i].beam2;
		cout << ", accent:" << track3[i].accent;
		cout << ", tie:" << track3[i].tie;
		cout << ", func:" << setw(2) << track3[i].func;
		cout << ", sa:" << track3[i].sa[0] << track3[i].sa[1] << track3[i].sa[2] << endl;
	}
	cout << ig << endl << endl;

	for (i = 0; i < ib; i++)
	{
		cout << "tact:" << setw(3) << track4[i].tact;
		cout << ", fishka:" << setw(3) << track4[i].fishka;
		cout << ", qfish:" << track4[i].qfish;
		cout << ", nfish:" << setw(3) << track4[i].nfish;
		cout << ", liga:" << (track4[i].liga ? "YES" : "NO ");
		cout << ", step:" << setw(3) << (track4[i].step >=0 ? track4[i].step : -1);
		cout << ", nn:" << setw(3) << (track4[i].step >=0 ? track4[i].nn : -1);
		cout << ", note:" << (track4[i].step >=0 ? track4[i].note : '-');
		cout << ", sign:" << (track4[i].step >=0 ? track4[i].sign : ' ');
		cout << ", octave:" << ( track4[i].step >=0 ? track4[i].octave : OKT);
		cout << ", duration:" << setw(2) << track4[i].duration;
		cout << ", time:" << setw(6) << track4[i].time;
		cout << ", voice:" << track4[i].voice;
		cout << ", dot:" << track4[i].dot;
		cout << ", stem:" << track4[i].stem;
		cout << ", staff:" << track4[i].staff;
		cout << ", beam1:" << track4[i].beam1;
		cout << ", beam2:" << track4[i].beam2;
		cout << ", accent:" << track4[i].accent;
		cout << ", tie:" << track4[i].tie;
		cout << ", func:" << setw(2) << track4[i].func;
		cout << ", sa:" << track4[i].sa[0] << track4[i].sa[1] << track4[i].sa[2] << endl;
	}
	cout << ib << endl << endl;


//=========================================================================================================================
	ofstream fout(pcTimeString);
//	ofstream fout("func.xml");
	fout << "<?xml version=\"1.0\" encoding='UTF-8' standalone='no' ?>" << endl;
	fout << "<!DOCTYPE score-partwise PUBLIC \"-//Recordare//DTD MusicXML 3.0 Partwise//EN\" \"http://www.musicxml.org/dtds/partwise.dtd\">" << endl << endl;
	fout << "<score-partwise version=\"3.0\">" << endl; fout << endl;
	fout << "  <work>" << endl; fout << "    <work-title>"+ton.signton1+" - "+ton.lad+" ("+nameris1+")</work-title>" << endl; fout << "  </work>" << endl;
	fout << "  <identification>" << endl; fout << "    <creator type=\"lyricist\">"+ritmris1.stil +"</creator>" << endl; fout << "    <creator type=\"composer\">"+ritmris1.istok+"</creator>" << endl; fout << "    <rights>Copyright 2019 Korenev Boris. All rights reserved.</rights>" << endl; fout << "    <encoding>" <<  endl; fout << "      <software>Pelika 1.0</software>" <<  endl; fout << "      <encoding-date>1963-10-04</encoding-date>" <<  endl; fout << "      <supports element=\"accidental\" type=\"yes\"/>" <<  endl; fout << "      <supports element=\"beam\" type=\"yes\"/>" <<  endl; fout << "      <supports element=\"print\" attribute=\"new-page\" type=\"yes\" value=\"yes\"/>" <<  endl; fout << "      <supports element=\"print\" attribute=\"new-system\" type=\"yes\" value=\"yes\"/>" <<  endl; fout << "      <supports element=\"stem\" type=\"yes\"/>" <<  endl; fout << "    </encoding>" <<  endl; fout << "  </identification>" << endl;
	fout << "  <defaults>" <<  endl; fout << "    <scaling>" <<  endl; fout << "      <millimeters>7.05556</millimeters>" <<  endl; fout << "      <tenths>40</tenths>" <<  endl; fout << "    </scaling>" <<  endl; fout << "    <page-layout>" <<  endl; fout << "      <page-height>1683.36</page-height>" <<  endl; fout << "      <page-width>1190.88</page-width>" <<  endl; fout << "      <page-margins type=\"even\">" <<  endl; fout << "        <left-margin>56.6929</left-margin>" <<  endl; fout << "        <right-margin>56.6929</right-margin>" <<  endl; fout << "        <top-margin>56.6929</top-margin>" <<  endl; fout << "        <bottom-margin>113.386</bottom-margin>" <<  endl; fout << "      </page-margins>" <<  endl; fout << "      <page-margins type=\"odd\">" <<  endl; fout << "        <left-margin>56.6929</left-margin>" <<  endl; fout << "        <right-margin>56.6929</right-margin>" <<  endl; fout << "        <top-margin>56.6929</top-margin>" <<  endl; fout << "        <bottom-margin>113.386</bottom-margin>" <<  endl; fout << "      </page-margins>" <<  endl; fout << "    </page-layout>" <<  endl; fout << "    <word-font font-family=\"FreeSerif\" font-size=\"10\"/>" <<  endl; fout << "    <lyric-font font-family=\"FreeSerif\" font-size=\"11\"/>" <<  endl; fout << "  </defaults>" <<  endl;
	fout << "  <credit page=\"1\">" <<  endl; fout << "    <credit-words default-x=\"595.44\" default-y=\"1626.67\" justify=\"center\" valign=\"top\" font-size=\"24\">"+ton.signton1+" - "+ton.lad+" ("+nameris1+")</credit-words>" <<  endl; fout << "  </credit>" <<  endl;
	fout << "  <credit page=\"1\">" <<  endl; fout << "    <credit-words default-x=\"595.44\" default-y=\"1569.97\" justify=\"center\" valign=\"top\" font-size=\"14\">"+posakk.poslkon+"</credit-words>" <<  endl; fout << "  </credit>" <<  endl;
	fout << "  <credit page=\"1\">" <<  endl; fout << "    <credit-words default-x=\"1134.19\" default-y=\"1526.67\" justify=\"right\" valign=\"bottom\" font-size=\"12\">"+ritmris1.istok+" "+vrmton1+"</credit-words>" <<  endl; fout << "  </credit>" <<  endl;
	fout << "  <credit page=\"1\">" <<  endl; fout << "    <credit-words default-x=\"56.6929\" default-y=\"1526.67\" justify=\"left\" valign=\"bottom\" font-size=\"12\">"+akkton+"</credit-words>" <<  endl; fout << "  </credit>" <<  endl;
	fout << "  <credit page=\"1\">" <<  endl; fout << "    <credit-words default-x=\"595.44\" default-y=\"113.386\" justify=\"center\" valign=\"bottom\" font-size=\"8\">Copyright 2019 Korenev Boris. All rights reserved.</credit-words>" <<  endl; fout << "  </credit>" <<  endl;

	fout << "<part-list>" << endl;
	for ( i = 0; i < 4; i++)
	{
		fout << " <score-part id=\"P" << i+1 << "\">" << endl;
		fout << "   <part-name>"+soin[instrum[i]-1].nameins+"</part-name>" << endl;
		fout << "   <part-abbreviation>" << i+1 << "</part-abbreviation>" << endl;
		fout << "   <score-instrument id=\"P" << i+1 << "-I1\">" << endl;
		fout << "     <instrument-name>"+soin[instrum[i]-1].nameins+"</instrument-name>" << endl;
		fout << "   </score-instrument>" << endl;
		fout << "   <midi-device id=\"P" << i+1 << "-I1\" port=\"1\"></midi-device>" << endl;
		fout << "   <midi-instrument id=\"P" << i+1 << "-I1\">" << endl;
		fout << "     <midi-channel>" << i+1 << "</midi-channel>" << endl;
		fout << "     <midi-program>" << instrum[i] << "</midi-program>" << endl;
		fout << "     <volume>" << vol[i] << "</volume>" << endl;
		fout << "     <pan>0</pan>" << endl;
		fout << "   </midi-instrument>" << endl;
		fout << " </score-part>" << endl;
	}
	fout << "</part-list>" << endl << endl;

//========================================================================================================================== P1 ================================================================================================================
	i = 0;
	fout << "<part id=\"P1\">" << endl << endl;
	while ( i < im ) {
		j = track1[i].tact;
		fout << "<measure number=\"" << j << "\">" << endl << endl;
		if (i == 0) {
			fout << " <attributes>" << endl;
			fout << "  <divisions>" << LD/ds << "</divisions>" << endl;
			fout << "  <key>" << endl; fout << "   <fifths>" << ton.altton << "</fifths>" << endl; fout << "   <mode>" << ton.lad << "</mode>" << endl; fout << "  </key>" << endl;
			fout << "  <time>" << endl; fout << "   <beats>" << dc << "</beats>" << endl; fout << "   <beat-type>" << ds << "</beat-type>" << endl; fout << "  </time>" << endl;
			fout << "  <staves>1</staves>" << endl;
			fout << "  <clef>" << endl; fout << "   <sign>G</sign>" << endl; fout << "   <line>2</line>" << endl; fout << "  </clef>" << endl;
			fout << "  <staff-details number=\"1\" print-object=\"yes\" />" << endl;
			fout << "  <transpose>" << endl;
			fout << "   <diatonic>0</diatonic>" << endl;
			fout << "   <chromatic>0</chromatic>" << endl;
			fout << "  </transpose>" << endl;
			fout << " </attributes>" << endl << endl;
			fout << " <direction>" << endl; fout << "  <direction-type>" << endl; fout << "   <metronome>" << endl; fout << "    <beat-unit>quarter</beat-unit>" << endl; fout << "    <per-minute>" << vt << "</per-minute>" << endl; fout << "   </metronome>" << endl; fout << "  </direction-type>" << endl; fout << "  <voice>1</voice>" << endl; fout << "  <staff>1</staff>" << endl; fout << " </direction>" << endl << endl;
			if (REP) { fout << "<barline location=\"left\">" << endl; fout << "  <bar-style>heavy-light</bar-style>" << endl; fout << "  <repeat direction=\"forward\"/>" << endl; fout << "</barline>" << endl << endl; }
		}
		while ( (i < im) && (j == track1[i].tact) ) {
			k = track1[i].voice;
			while ( (i < im) && (j == track1[i].tact) && (k == track1[i].voice) ) {
				fout << " <note>" << endl;
				if (track1[i].func == -2) { fout << "  <chord/>" << endl; }
				if (track1[i].step >= 0)
				{
					m = ( track1[i].sign == ' ' ? 0 : ( track1[i].sign == 'b' ? -1 : ( track1[i].sign == '#' ? 1 : ( track1[i].sign == 'x' ? 2 : -2 ))));
					fout << "  <pitch>" << endl;
					fout << "   <step>" << track1[i].note << "</step>" << endl;
					fout << "   <alter>" << m << "</alter>" << endl;
					fout << "   <octave>" << track1[i].octave << "</octave>" << endl;
					fout << "  </pitch>" << endl;
				}
				else { fout << "  <rest/>" << endl; }
				fout << "  <duration>" << (LD*(2+track1[i].dot))/(2*track1[i].duration) << "</duration>" << endl;
				if (track1[i].tie == 1) { fout << "  <tie type=\"start\"/>" << endl; } else if (track1[i].tie == 2) { fout << "  <tie type=\"stop\"/>" << endl; }
				fout << "  <voice>" << track1[i].voice << "</voice>" << endl;
				fout << "  <type>" << durtype[funlog2(track1[i].duration)] << "</type>" << endl;
				if(track1[i].dot != 0) { fout << "  <dot/>" << endl; }
				fout << "  <stem>" << (track1[i].stem == 1 ? "up":"down") << "</stem>" << endl;
				fout << "  <staff>" << track1[i].staff << "</staff>" << endl;
				if(track1[i].beam1 != 0) { fout << "  <beam number=\"1\">" << beam_c[track1[i].beam1] << "</beam>" << endl; }
				if(track1[i].beam2 != 0) { fout << "  <beam number=\"2\">" << beam_c[track1[i].beam2] << "</beam>" << endl; }
				fout << "  <notations>" << endl;
				if (track1[i].tie == 1) { fout << "   <tied type=\"start\"/>" << endl; } else if (track1[i].tie == 2) { fout << "   <tied type=\"stop\"/>" << endl; }
				if( (track1[i].voice == 0) && (track1[i].accent != 0) ) { fout << "   <articulations>" << endl; fout << "    <accent/>" << endl; fout << "   </articulations>" << endl; }
				fout << "  </notations>" << endl;
//				if ( (track1[i].voice == 0 ) && (track1[i].accent != 0) && !notet[track1[i].step].ust ) { fout << "  <lyric>" << endl; fout << "   <text>" << "__" << "</text>" << endl; fout << "  </lyric>" << endl; }
				fout << " </note>" << endl << endl;
				i++;
			}
			fout << " <backup>" << endl; fout << "  <duration>" << LD << "</duration>" << endl; fout << " </backup>" << endl << endl;
		}
		if (REP) { if (i == im) { fout << "<barline location=\"right\">" << endl; fout << "  <bar-style>light-heavy</bar-style>" << endl; fout << "  <repeat direction=\"backward\" times=\"2\"/>" << endl; fout << "</barline>" << endl << endl; } }
		fout << "</measure>" << endl << endl;
	}
	fout << "</part>" << endl << endl;
//========================================================================================================================== P2 ================================================================================================================
	i = 0;
	fout << "<part id=\"P2\">" << endl << endl;
	while ( i < ip ) {
		j = track2[i].tact;
		fout << "<measure number=\"" << j << "\">" << endl << endl;
		if (i == 0) {
			fout << " <attributes>" << endl;
			fout << "  <divisions>" << LD/ds << "</divisions>" << endl;
			fout << "  <key>" << endl; fout << "   <fifths>" << ton.altton << "</fifths>" << endl; fout << "   <mode>" << ton.lad << "</mode>" << endl; fout << "  </key>" << endl;
			fout << "  <time>" << endl; fout << "   <beats>" << dc << "</beats>" << endl; fout << "   <beat-type>" << ds << "</beat-type>" << endl; fout << "  </time>" << endl;
			fout << "  <staves>1</staves>" << endl;
			fout << "  <clef number=\"1\">" << endl; fout << "   <sign>G</sign>" << endl; fout << "   <line>2</line>" << endl; fout << "  </clef>" << endl;
			fout << "  <staff-details number=\"1\" print-object=\"yes\" />" << endl;
			fout << "  <transpose>" << endl;
			fout << "   <diatonic>0</diatonic>" << endl;
			fout << "   <chromatic>0</chromatic>" << endl;
			fout << "  </transpose>" << endl;
			fout << " </attributes>" << endl << endl;
			if (REP) { fout << "<barline location=\"left\">" << endl; fout << "  <bar-style>heavy-light</bar-style>" << endl; fout << "  <repeat direction=\"forward\"/>" << endl; fout << "</barline>" << endl << endl; }
		}
		while ( (i < ip) && (j == track2[i].tact) ) {
			k = track2[i].voice;
			while ( (i < ip) && (j == track2[i].tact) && (k == track2[i].voice) ) {
				fout << " <note>" << endl;
				if (track2[i].func == -2) { fout << "  <chord/>" << endl; }
				if (track2[i].step >= 0)
				{
					m = ( track2[i].sign == ' ' ? 0 : ( track2[i].sign == 'b' ? -1 : ( track2[i].sign == '#' ? 1 : ( track2[i].sign == 'x' ? 2 : -2 ))));
					fout << "  <pitch>" << endl;
					fout << "   <step>" << track2[i].note << "</step>" << endl;
					fout << "   <alter>" << m << "</alter>" << endl;
					fout << "   <octave>" << track2[i].octave << "</octave>" << endl;
					fout << "  </pitch>" << endl;
				}
				else { fout << "  <rest/>" << endl; }
				fout << "  <duration>" << (LD*(2+track2[i].dot))/(2*track2[i].duration) << "</duration>" << endl;
				if (track2[i].tie == 1) { fout << "  <tie type=\"start\"/>" << endl; } else if (track2[i].tie == 2) { fout << "  <tie type=\"stop\"/>" << endl; }
				fout << "  <voice>" << track2[i].voice << "</voice>" << endl;
				fout << "  <type>" << durtype[funlog2(track2[i].duration)] << "</type>" << endl;
				if(track2[i].dot != 0) { fout << "  <dot/>" << endl; }
				fout << "  <stem>" << (track2[i].stem == 1 ? "up":"down") << "</stem>" << endl;
				fout << "  <staff>" << track2[i].staff << "</staff>" << endl;
				if(track2[i].beam1 != 0) { fout << "  <beam number=\"1\">" << beam_c[track2[i].beam1] << "</beam>" << endl; }
				if(track2[i].beam2 != 0) { fout << "  <beam number=\"2\">" << beam_c[track2[i].beam2] << "</beam>" << endl; }
				fout << "  <notations>" << endl;
				if (track2[i].tie == 1) { fout << "   <tied type=\"start\"/>" << endl; } else if (track2[i].tie == 2) { fout << "   <tied type=\"stop\"/>" << endl; }
				if( (track2[i].voice == 0) && (track2[i].accent != 0) ) { fout << "   <articulations>" << endl; fout << "    <accent/>" << endl; fout << "   </articulations>" << endl; }
				fout << "  </notations>" << endl;
//				if ( (track2[i].voice == 0 ) && (track2[i].accent != 0) && !notet[track2[i].step].ust ) { fout << "  <lyric>" << endl; fout << "   <text>" << "__" << "</text>" << endl; fout << "  </lyric>" << endl; }
				fout << " </note>" << endl << endl;
				i++;
			}
			fout << " <backup>" << endl; fout << "  <duration>" << LD << "</duration>" << endl; fout << " </backup>" << endl << endl;
		}
		if (REP) { if (i == ip) { fout << "<barline location=\"right\">" << endl; fout << "  <bar-style>light-heavy</bar-style>" << endl; fout << "  <repeat direction=\"backward\" times=\"2\"/>" << endl; fout << "</barline>" << endl << endl; } }
		fout << "</measure>" << endl << endl;
	}
	fout << "</part>" << endl << endl;
//========================================================================================================================== P3 ================================================================================================================
	i = 0;
	fout << "<part id=\"P3\">" << endl << endl;
	while ( i < ig ) {
		j = track3[i].tact;
		fout << "<measure number=\"" << j << "\">" << endl << endl;
		if (i == 0) {
			fout << " <attributes>" << endl;
			fout << "  <divisions>" << LD/ds << "</divisions>" << endl;
			fout << "  <key>" << endl; fout << "   <fifths>" << ton.altton << "</fifths>" << endl; fout << "   <mode>" << ton.lad << "</mode>" << endl; fout << "  </key>" << endl;
			fout << "  <time>" << endl; fout << "   <beats>" << dc << "</beats>" << endl; fout << "   <beat-type>" << ds << "</beat-type>" << endl; fout << "  </time>" << endl;
			fout << "  <staves>1</staves>" << endl;
			fout << "  <clef number=\"1\">" << endl; fout << "   <sign>G</sign>" << endl; fout << "   <line>2</line>" << endl; fout << "  </clef>" << endl;
			fout << "  <staff-details number=\"1\" print-object=\"yes\" />" << endl;
			fout << "  <transpose>" << endl;
			fout << "   <diatonic>0</diatonic>" << endl;
			fout << "   <chromatic>0</chromatic>" << endl;
			fout << "  </transpose>" << endl;
			fout << " </attributes>" << endl << endl;
			if (REP) { fout << "<barline location=\"left\">" << endl; fout << "  <bar-style>heavy-light</bar-style>" << endl; fout << "  <repeat direction=\"forward\"/>" << endl; fout << "</barline>" << endl << endl; }
		}
		while ( (i < ig) && (j == track3[i].tact) ) {
			k = track3[i].voice;
			while ( (i < ig) && (j == track3[i].tact) && (k == track3[i].voice) ) {

				if (track3[i].func != -2)
				{

					fout << "<harmony print-frame=\"no\">" << endl;
					fout << "  <root>" << endl;
					fout << "    <root-step>" << track3[i].note << "</root-step>" << endl;

					if ( track3[i].sign == '#') { m =  1; fout << "    <root-alter>" << m << "</root-alter>" << endl; }
					if ( track3[i].sign == 'b') { m = -1; fout << "    <root-alter>" << m << "</root-alter>" << endl; }
					fout << "  </root>" << endl;

					if (track3[i].sa[1] == '5')
					{
						if (track3[i].sa[0] == ' ') { fout << "  <kind halign=\"center\" text=\"\">major</kind>"  << endl; }
						if (track3[i].sa[0] == 'm') { fout << "  <kind halign=\"center\" text=\"m\">minor</kind>" << endl; }
						if (track3[i].sa[0] == '0') { fout << "  <kind halign=\"center\" use-symbols=\"yes\">diminished</kind>" << endl; }
						if (track3[i].sa[0] == '+') { fout << "  <kind halign=\"center\" text=\"+5\" use-symbols=\"yes\">power</kind>" << endl; }
					}
					if (track3[i].sa[1] == '7')
					{
						if (track3[i].sa[0] == ' ') { fout << "  <kind halign=\"center\" text=\"7\">dominant</kind>"  << endl; }
						if (track3[i].sa[0] == 'M') { fout << "  <kind halign=\"center\" text=\"7\">major-seventh</kind>"  << endl; }
						if (track3[i].sa[0] == 'm') { fout << "  <kind halign=\"center\" text=\"m7\">minor-seventh</kind>" << endl; }
						if (track3[i].sa[0] == '0') { fout << "  <kind halign=\"center\" use-symbols=\"yes\">half-diminished</kind>"  << endl; }
						if (track3[i].sa[0] == '+') { fout << "  <kind halign=\"center\" text=\"+5\" use-symbols=\"yes\">power</kind>" << endl; }

					}
					fout << "</harmony>" << endl << endl;
				}

				fout << " <note>" << endl;
				if (track3[i].func == -2) { fout << "  <chord/>" << endl; }
				if (track3[i].step >= 0)
				{
					m = ( track3[i].sign == ' ' ? 0 : ( track3[i].sign == 'b' ? -1 : ( track3[i].sign == '#' ? 1 : ( track3[i].sign == 'x' ? 2 : -2 ))));
					fout << "  <pitch>" << endl;
					fout << "   <step>" << track3[i].note << "</step>" << endl;
					fout << "   <alter>" << m << "</alter>" << endl;
					fout << "   <octave>" << track3[i].octave << "</octave>" << endl;
					fout << "  </pitch>" << endl;
				}
				else { fout << "  <rest/>" << endl; }
				fout << "  <duration>" << (LD*(2+track3[i].dot))/(2*track3[i].duration) << "</duration>" << endl;
				if (track3[i].tie == 1) { fout << "  <tie type=\"start\"/>" << endl; } else if (track3[i].tie == 2) { fout << "  <tie type=\"stop\"/>" << endl; }
				fout << "  <voice>" << track3[i].voice << "</voice>" << endl;
				fout << "  <type>" << durtype[funlog2(track3[i].duration)] << "</type>" << endl;
				if(track3[i].dot != 0) { fout << "  <dot/>" << endl; }
				fout << "  <stem>" << (track3[i].stem == 1 ? "up":"down") << "</stem>" << endl;
				fout << "  <staff>" << track3[i].staff << "</staff>" << endl;
				if(track3[i].beam1 != 0) { fout << "  <beam number=\"1\">" << beam_c[track3[i].beam1] << "</beam>" << endl; }
				if(track3[i].beam2 != 0) { fout << "  <beam number=\"2\">" << beam_c[track3[i].beam2] << "</beam>" << endl; }
				fout << "  <notations>" << endl;
				if (track3[i].tie == 1) { fout << "   <tied type=\"start\"/>" << endl; } else if (track3[i].tie == 2) { fout << "   <tied type=\"stop\"/>" << endl; }
				fout << "  </notations>" << endl;
				fout << " </note>" << endl << endl;
				i++;
			}
			fout << " <backup>" << endl; fout << "  <duration>" << LD << "</duration>" << endl; fout << " </backup>" << endl << endl;
		}
		if (REP) { if (i == ig) { fout << "<barline location=\"right\">" << endl; fout << "  <bar-style>light-heavy</bar-style>" << endl; fout << "  <repeat direction=\"backward\" times=\"2\"/>" << endl; fout << "</barline>" << endl << endl; } }
		fout << "</measure>" << endl << endl;
	}
	fout << "</part>" << endl << endl;
//========================================================================================================================== P4 ================================================================================================================
	i = 0;
	fout << "<part id=\"P4\">" << endl << endl;
	while ( i < ib ) {
		j = track4[i].tact;
		fout << "<measure number=\"" << j << "\">" << endl << endl;
		if (i == 0) {
			fout << " <attributes>" << endl;
			fout << "  <divisions>" << LD/ds << "</divisions>" << endl;
			fout << "  <key>" << endl; fout << "   <fifths>" << ton.altton << "</fifths>" << endl; fout << "   <mode>" << ton.lad << "</mode>" << endl; fout << "  </key>" << endl;
			fout << "  <time>" << endl; fout << "   <beats>" << dc << "</beats>" << endl; fout << "   <beat-type>" << ds << "</beat-type>" << endl; fout << "  </time>" << endl;
			fout << "  <staves>1</staves>" << endl;
			fout << "  <clef number=\"1\">" << endl; fout << "   <sign>F</sign>" << endl; fout << "   <line>4</line>" << endl; fout << "  </clef>" << endl;
			fout << "  <staff-details number=\"1\" print-object=\"yes\" />" << endl;
			fout << "  <transpose>" << endl;
			fout << "   <diatonic>0</diatonic>" << endl;
			fout << "   <chromatic>0</chromatic>" << endl;
			fout << "  </transpose>" << endl;
			fout << " </attributes>" << endl << endl;
			if (REP) { fout << "<barline location=\"left\">" << endl; fout << "  <bar-style>heavy-light</bar-style>" << endl; fout << "  <repeat direction=\"forward\"/>" << endl; fout << "</barline>" << endl << endl; }
		}
		while ( (i < ib) && (j == track4[i].tact) ) {
			k = track4[i].voice;
			while ( (i < ib) && (j == track4[i].tact) && (k == track4[i].voice) ) {
				fout << " <note>" << endl;
				if (track4[i].func == -2) { fout << "  <chord/>" << endl; }
				if (track4[i].step >= 0)
				{
					m = ( track4[i].sign == ' ' ? 0 : ( track4[i].sign == 'b' ? -1 : ( track4[i].sign == '#' ? 1 : ( track4[i].sign == 'x' ? 2 : -2 ))));
					fout << "  <pitch>" << endl;
					fout << "   <step>" << track4[i].note << "</step>" << endl;
					fout << "   <alter>" << m << "</alter>" << endl;
					fout << "   <octave>" << track4[i].octave << "</octave>" << endl;
					fout << "  </pitch>" << endl;
				}
				else { fout << "  <rest/>" << endl; }
				fout << "  <duration>" << (LD*(2+track4[i].dot))/(2*track4[i].duration) << "</duration>" << endl;
				if (track4[i].tie == 1) { fout << "  <tie type=\"start\"/>" << endl; } else if (track4[i].tie == 2) { fout << "  <tie type=\"stop\"/>" << endl; }
				fout << "  <voice>" << track4[i].voice << "</voice>" << endl;
				fout << "  <type>" << durtype[funlog2(track4[i].duration)] << "</type>" << endl;
				if(track4[i].dot != 0) { fout << "  <dot/>" << endl; }
				fout << "  <stem>" << (track4[i].stem == 1 ? "up":"down") << "</stem>" << endl;
				fout << "  <staff>" << track4[i].staff << "</staff>" << endl;
				if(track4[i].beam1 != 0) { fout << "  <beam number=\"1\">" << beam_c[track4[i].beam1] << "</beam>" << endl; }
				if(track4[i].beam2 != 0) { fout << "  <beam number=\"2\">" << beam_c[track4[i].beam2] << "</beam>" << endl; }
				fout << "  <notations>" << endl;
				if (track4[i].tie == 1) { fout << "   <tied type=\"start\"/>" << endl; } else if (track4[i].tie == 2) { fout << "   <tied type=\"stop\"/>" << endl; }
				if( (track4[i].voice == 0) && (track4[i].accent != 0) ) { fout << "   <articulations>" << endl; fout << "    <accent/>" << endl; fout << "   </articulations>" << endl; }
				fout << "  </notations>" << endl;
				fout << " </note>" << endl << endl;
				i++;
			}
			fout << " <backup>" << endl; fout << "  <duration>" << LD << "</duration>" << endl; fout << " </backup>" << endl << endl;
		}
		if (REP) { if (i == ib) { fout << "<barline location=\"right\">" << endl; fout << "  <bar-style>light-heavy</bar-style>" << endl; fout << "  <repeat direction=\"backward\" times=\"2\"/>" << endl; fout << "</barline>" << endl << endl; } }
		fout << "</measure>" << endl << endl;
	}
	fout << "</part>" << endl << endl;
//==============================================================================================================================================================================================================================================
	fout << "</score-partwise>" << endl;
	fout.close();
	return 0;
}
